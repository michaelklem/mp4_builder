/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.lbt.dto;

import com.lbt.dao.*;
import com.lbt.factory.*;
import com.lbt.exceptions.*;

import java.io.Serializable;
import java.util.*;

public class Stories implements Serializable
{
	/**
	 * used to store the file name of the generated mp4
	 */
	protected String filename;
	/** 
	 * This attribute maps to the column story_id in the stories table.
	 */
	protected long storyId;

	/** 
	 * This attribute maps to the column user_id in the stories table.
	 */
	protected long userId;

	/** 
	 * This attribute maps to the column title in the stories table.
	 */
	protected String title;

	/** 
	 * This attribute maps to the column author in the stories table.
	 */
	protected String author;

	/** 
	 * This attribute maps to the column image_path in the stories table.
	 */
	protected String imagePath;

	/** 
	 * This attribute maps to the column image_path_med in the stories table.
	 */
	protected String imagePathMed;

	/** 
	 * This attribute maps to the column image_path_sml in the stories table.
	 */
	protected String imagePathSml;

	/** 
	 * This attribute maps to the column public in the stories table.
	 */
	protected short aPublic;

	/** 
	 * This attribute maps to the column date_created in the stories table.
	 */
	protected Date dateCreated;

	/** 
	 * This attribute maps to the column date_modified in the stories table.
	 */
	protected Date dateModified;

	/** 
	 * This attribute maps to the column contest_related in the stories table.
	 */
	protected short contestRelated;

	/** 
	 * This attribute represents whether the primitive attribute contestRelated is null.
	 */
	protected boolean contestRelatedNull = true;

	/** 
	 * This attribute maps to the column featured in the stories table.
	 */
	protected short featured;

	/** 
	 * This attribute represents whether the primitive attribute featured is null.
	 */
	protected boolean featuredNull = true;

	/** 
	 * This attribute maps to the column craft in the stories table.
	 */
	protected short craft;

	/** 
	 * This attribute represents whether the primitive attribute craft is null.
	 */
	protected boolean craftNull = true;

	/** 
	 * This attribute maps to the column unsaved in the stories table.
	 */
	protected short unsaved;

	/** 
	 * This attribute maps to the column audio_path in the stories table.
	 */
	protected String audioPath;

	/** 
	 * This attribute maps to the column is_processing in the stories table.
	 */
	protected short isProcessing;

	/** 
	 * This attribute represents whether the primitive attribute isProcessing is null.
	 */
	protected boolean isProcessingNull = true;

	/** 
	 * This attribute maps to the column is_complied in the stories table.
	 */
	protected short isComplied;

	/** 
	 * This attribute represents whether the primitive attribute isComplied is null.
	 */
	protected boolean isCompliedNull = true;

	/** 
	 * This attribute maps to the column date_complied in the stories table.
	 */
	protected Date dateComplied;

	/** 
	 * This attribute maps to the column is_error in the stories table.
	 */
	protected short isError;

	/** 
	 * This attribute represents whether the primitive attribute isError is null.
	 */
	protected boolean isErrorNull = true;

	/** 
	 */
	protected short processAsMp4;

	/** 
	 */
	protected Date mp4JobRequestedDate;

	/** 
	 */
	protected Date mp4JobCompletedDate;

	protected boolean isAudioMuted;

	/**
	 * Method 'Stories'
	 * 
	 */
	public Stories()
	{
	}

	public Users getUser()
	{
		Users user = null;
		try {
			UsersDao _dao = UsersDaoFactory.create();
			 Users[] u;
			 u = _dao.findWhereUserIdEquals(getUserId());
			 if (u.length > 0)
			 {
				 user = u[0];
			 }
		} catch (UsersDaoException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return user;
	}
	
	// returns the bucket path for a user ie. a/3/2/1
	public String getBucketPath()
	{
		String bucketPath = "";
		Users u = getUser();
		if ( u != null)
		{
			bucketPath = u.getBucketPath();
		}
		return bucketPath;
	}
	
	// returns the bucket path for a user with their user id appended ie. a/3/2/1/<user_id>
	public String getFullBucketPath()
	{
		return getBucketPath() + "/" + userId;
	}

	public String getFilename()
	{
		return this.filename;
	}
	
	public void setFilename(String filename)
	{
		this.filename = filename;
	}
	
	/**
	 * Method 'getStoryId'
	 * 
	 * @return long
	 */
	public long getStoryId()
	{
		return storyId;
	}

	/**
	 * Method 'setStoryId'
	 * 
	 * @param storyId
	 */
	public void setStoryId(long storyId)
	{
		this.storyId = storyId;
	}

	/**
	 * Method 'getUserId'
	 * 
	 * @return long
	 */
	public long getUserId()
	{
		return userId;
	}

	/**
	 * Method 'setUserId'
	 * 
	 * @param userId
	 */
	public void setUserId(long userId)
	{
		this.userId = userId;
	}

	/**
	 * Method 'getTitle'
	 * 
	 * @return String
	 */
	public String getTitle()
	{
		return title;
	}

	/**
	 * Method 'setTitle'
	 * 
	 * @param title
	 */
	public void setTitle(String title)
	{
		this.title = title;
	}

	/**
	 * Method 'getAuthor'
	 * 
	 * @return String
	 */
	public String getAuthor()
	{
		return author;
	}

	/**
	 * Method 'setAuthor'
	 * 
	 * @param author
	 */
	public void setAuthor(String author)
	{
		this.author = author;
	}

	/**
	 * Method 'getImagePath'
	 * 
	 * @return String
	 */
	public String getImagePath()
	{
		return imagePath;
	}

	/**
	 * Method 'setImagePath'
	 * 
	 * @param imagePath
	 */
	public void setImagePath(String imagePath)
	{
		this.imagePath = imagePath;
	}

	/**
	 * Method 'getImagePathMed'
	 * 
	 * @return String
	 */
	public String getImagePathMed()
	{
		return imagePathMed;
	}

	/**
	 * Method 'setImagePathMed'
	 * 
	 * @param imagePathMed
	 */
	public void setImagePathMed(String imagePathMed)
	{
		this.imagePathMed = imagePathMed;
	}

	/**
	 * Method 'getImagePathSml'
	 * 
	 * @return String
	 */
	public String getImagePathSml()
	{
		return imagePathSml;
	}

	/**
	 * Method 'setImagePathSml'
	 * 
	 * @param imagePathSml
	 */
	public void setImagePathSml(String imagePathSml)
	{
		this.imagePathSml = imagePathSml;
	}

	/**
	 * Method 'getAPublic'
	 * 
	 * @return short
	 */
	public short getAPublic()
	{
		return aPublic;
	}

	/**
	 * Method 'setAPublic'
	 * 
	 * @param aPublic
	 */
	public void setAPublic(short aPublic)
	{
		this.aPublic = aPublic;
	}

	/**
	 * Method 'getDateCreated'
	 * 
	 * @return Date
	 */
	public Date getDateCreated()
	{
		return dateCreated;
	}

	/**
	 * Method 'setDateCreated'
	 * 
	 * @param dateCreated
	 */
	public void setDateCreated(Date dateCreated)
	{
		this.dateCreated = dateCreated;
	}

	/**
	 * Method 'getDateModified'
	 * 
	 * @return Date
	 */
	public Date getDateModified()
	{
		return dateModified;
	}

	/**
	 * Method 'setDateModified'
	 * 
	 * @param dateModified
	 */
	public void setDateModified(Date dateModified)
	{
		this.dateModified = dateModified;
	}

	/**
	 * Method 'getContestRelated'
	 * 
	 * @return short
	 */
	public short getContestRelated()
	{
		return contestRelated;
	}

	/**
	 * Method 'setContestRelated'
	 * 
	 * @param contestRelated
	 */
	public void setContestRelated(short contestRelated)
	{
		this.contestRelated = contestRelated;
		this.contestRelatedNull = false;
	}

	/**
	 * Method 'setContestRelatedNull'
	 * 
	 * @param value
	 */
	public void setContestRelatedNull(boolean value)
	{
		this.contestRelatedNull = value;
	}

	/**
	 * Method 'isContestRelatedNull'
	 * 
	 * @return boolean
	 */
	public boolean isContestRelatedNull()
	{
		return contestRelatedNull;
	}

	/**
	 * Method 'getFeatured'
	 * 
	 * @return short
	 */
	public short getFeatured()
	{
		return featured;
	}

	/**
	 * Method 'setFeatured'
	 * 
	 * @param featured
	 */
	public void setFeatured(short featured)
	{
		this.featured = featured;
		this.featuredNull = false;
	}

	/**
	 * Method 'setFeaturedNull'
	 * 
	 * @param value
	 */
	public void setFeaturedNull(boolean value)
	{
		this.featuredNull = value;
	}

	/**
	 * Method 'isFeaturedNull'
	 * 
	 * @return boolean
	 */
	public boolean isFeaturedNull()
	{
		return featuredNull;
	}

	/**
	 * Method 'getCraft'
	 * 
	 * @return short
	 */
	public short getCraft()
	{
		return craft;
	}

	/**
	 * Method 'setCraft'
	 * 
	 * @param craft
	 */
	public void setCraft(short craft)
	{
		this.craft = craft;
		this.craftNull = false;
	}

	/**
	 * Method 'setCraftNull'
	 * 
	 * @param value
	 */
	public void setCraftNull(boolean value)
	{
		this.craftNull = value;
	}

	/**
	 * Method 'isCraftNull'
	 * 
	 * @return boolean
	 */
	public boolean isCraftNull()
	{
		return craftNull;
	}

	/**
	 * Method 'getUnsaved'
	 * 
	 * @return short
	 */
	public short getUnsaved()
	{
		return unsaved;
	}

	/**
	 * Method 'setUnsaved'
	 * 
	 * @param unsaved
	 */
	public void setUnsaved(short unsaved)
	{
		this.unsaved = unsaved;
	}

	/**
	 * Method 'getAudioPath'
	 * 
	 * @return String
	 */
	public String getAudioPath()
	{
		if (getIsAudioMuted())
		{
			System.out.println("Cover audio is muted2");
			audioPath = null;
		}
		return audioPath;
	}

	/**
	 * Method 'setAudioPath'
	 * 
	 * @param audioPath
	 */
	public void setAudioPath(String audioPath)
	{
		this.audioPath = audioPath;
	}

	/**
	 * Method 'getIsProcessing'
	 * 
	 * @return short
	 */
	public short getIsProcessing()
	{
		return isProcessing;
	}

	/**
	 * Method 'setIsProcessing'
	 * 
	 * @param isProcessing
	 */
	public void setIsProcessing(short isProcessing)
	{
		this.isProcessing = isProcessing;
		this.isProcessingNull = false;
	}

	/**
	 * Method 'setIsProcessingNull'
	 * 
	 * @param value
	 */
	public void setIsProcessingNull(boolean value)
	{
		this.isProcessingNull = value;
	}

	/**
	 * Method 'isIsProcessingNull'
	 * 
	 * @return boolean
	 */
	public boolean isIsProcessingNull()
	{
		return isProcessingNull;
	}

	/**
	 * Method 'getIsComplied'
	 * 
	 * @return short
	 */
	public short getIsComplied()
	{
		return isComplied;
	}

	/**
	 * Method 'setIsComplied'
	 * 
	 * @param isComplied
	 */
	public void setIsComplied(short isComplied)
	{
		this.isComplied = isComplied;
		this.isCompliedNull = false;
	}

	/**
	 * Method 'setIsCompliedNull'
	 * 
	 * @param value
	 */
	public void setIsCompliedNull(boolean value)
	{
		this.isCompliedNull = value;
	}

	/**
	 * Method 'isIsCompliedNull'
	 * 
	 * @return boolean
	 */
	public boolean isIsCompliedNull()
	{
		return isCompliedNull;
	}

	/**
	 * Method 'getDateComplied'
	 * 
	 * @return Date
	 */
	public Date getDateComplied()
	{
		return dateComplied;
	}

	/**
	 * Method 'setDateComplied'
	 * 
	 * @param dateComplied
	 */
	public void setDateComplied(Date dateComplied)
	{
		this.dateComplied = dateComplied;
	}

	/**
	 * Method 'getIsError'
	 * 
	 * @return short
	 */
	public short getIsError()
	{
		return isError;
	}

	/**
	 * Method 'setIsError'
	 * 
	 * @param isError
	 */
	public void setIsError(short isError)
	{
		this.isError = isError;
		this.isErrorNull = false;
	}

	/**
	 * Method 'setIsErrorNull'
	 * 
	 * @param value
	 */
	public void setIsErrorNull(boolean value)
	{
		this.isErrorNull = value;
	}

	/**
	 * Method 'isIsErrorNull'
	 * 
	 * @return boolean
	 */
	public boolean isIsErrorNull()
	{
		return isErrorNull;
	}

	/**
	 * Method 'equals'
	 * 
	 * @param _other
	 * @return boolean
	 */
	public boolean equals(Object _other)
	{
		if (_other == null) {
			return false;
		}
		
		if (_other == this) {
			return true;
		}
		
		if (!(_other instanceof Stories)) {
			return false;
		}
		
		final Stories _cast = (Stories) _other;
		if (storyId != _cast.storyId) {
			return false;
		}
		
		if (userId != _cast.userId) {
			return false;
		}
		
		if (title == null ? _cast.title != title : !title.equals( _cast.title )) {
			return false;
		}
		
		if (author == null ? _cast.author != author : !author.equals( _cast.author )) {
			return false;
		}
		
		if (imagePath == null ? _cast.imagePath != imagePath : !imagePath.equals( _cast.imagePath )) {
			return false;
		}
		
		if (imagePathMed == null ? _cast.imagePathMed != imagePathMed : !imagePathMed.equals( _cast.imagePathMed )) {
			return false;
		}
		
		if (imagePathSml == null ? _cast.imagePathSml != imagePathSml : !imagePathSml.equals( _cast.imagePathSml )) {
			return false;
		}
		
		if (aPublic != _cast.aPublic) {
			return false;
		}
		
		if (dateCreated == null ? _cast.dateCreated != dateCreated : !dateCreated.equals( _cast.dateCreated )) {
			return false;
		}
		
		if (dateModified == null ? _cast.dateModified != dateModified : !dateModified.equals( _cast.dateModified )) {
			return false;
		}
		
		if (contestRelated != _cast.contestRelated) {
			return false;
		}
		
		if (contestRelatedNull != _cast.contestRelatedNull) {
			return false;
		}
		
		if (featured != _cast.featured) {
			return false;
		}
		
		if (featuredNull != _cast.featuredNull) {
			return false;
		}
		
		if (craft != _cast.craft) {
			return false;
		}
		
		if (craftNull != _cast.craftNull) {
			return false;
		}
		
		if (unsaved != _cast.unsaved) {
			return false;
		}
		
		if (audioPath == null ? _cast.audioPath != audioPath : !audioPath.equals( _cast.audioPath )) {
			return false;
		}
		
		if (isProcessing != _cast.isProcessing) {
			return false;
		}
		
		if (isProcessingNull != _cast.isProcessingNull) {
			return false;
		}
		
		if (isComplied != _cast.isComplied) {
			return false;
		}
		
		if (isCompliedNull != _cast.isCompliedNull) {
			return false;
		}
		
		if (dateComplied == null ? _cast.dateComplied != dateComplied : !dateComplied.equals( _cast.dateComplied )) {
			return false;
		}
		
		if (isError != _cast.isError) {
			return false;
		}
		
		if (isErrorNull != _cast.isErrorNull) {
			return false;
		}
		
		return true;
	}

	/**
	 * Method 'hashCode'
	 * 
	 * @return int
	 */
	public int hashCode()
	{
		int _hashCode = 0;
		_hashCode = 29 * _hashCode + (int) (storyId ^ (storyId >>> 32));
		_hashCode = 29 * _hashCode + (int) (userId ^ (userId >>> 32));
		if (title != null) {
			_hashCode = 29 * _hashCode + title.hashCode();
		}
		
		if (author != null) {
			_hashCode = 29 * _hashCode + author.hashCode();
		}
		
		if (imagePath != null) {
			_hashCode = 29 * _hashCode + imagePath.hashCode();
		}
		
		if (imagePathMed != null) {
			_hashCode = 29 * _hashCode + imagePathMed.hashCode();
		}
		
		if (imagePathSml != null) {
			_hashCode = 29 * _hashCode + imagePathSml.hashCode();
		}
		
		_hashCode = 29 * _hashCode + (int) aPublic;
		if (dateCreated != null) {
			_hashCode = 29 * _hashCode + dateCreated.hashCode();
		}
		
		if (dateModified != null) {
			_hashCode = 29 * _hashCode + dateModified.hashCode();
		}
		
		_hashCode = 29 * _hashCode + (int) contestRelated;
		_hashCode = 29 * _hashCode + (contestRelatedNull ? 1 : 0);
		_hashCode = 29 * _hashCode + (int) featured;
		_hashCode = 29 * _hashCode + (featuredNull ? 1 : 0);
		_hashCode = 29 * _hashCode + (int) craft;
		_hashCode = 29 * _hashCode + (craftNull ? 1 : 0);
		_hashCode = 29 * _hashCode + (int) unsaved;
		if (audioPath != null) {
			_hashCode = 29 * _hashCode + audioPath.hashCode();
		}
		
		_hashCode = 29 * _hashCode + (int) isProcessing;
		_hashCode = 29 * _hashCode + (isProcessingNull ? 1 : 0);
		_hashCode = 29 * _hashCode + (int) isComplied;
		_hashCode = 29 * _hashCode + (isCompliedNull ? 1 : 0);
		if (dateComplied != null) {
			_hashCode = 29 * _hashCode + dateComplied.hashCode();
		}
		
		_hashCode = 29 * _hashCode + (int) isError;
		_hashCode = 29 * _hashCode + (isErrorNull ? 1 : 0);
		return _hashCode;
	}

	/**
	 * Method 'createPk'
	 * 
	 * @return StoriesPk
	 */
	public StoriesPk createPk()
	{
		return new StoriesPk(storyId);
	}

	/**
	 * Method 'toString'
	 * 
	 * @return String
	 */
	public String toString()
	{
		StringBuffer ret = new StringBuffer();
		ret.append( "com.lbt.dto.Stories: " );
		ret.append( "storyId=" + storyId );
		ret.append( ", userId=" + userId );
		ret.append( ", title=" + title );
		ret.append( ", author=" + author );
		ret.append( ", imagePath=" + imagePath );
		ret.append( ", imagePathMed=" + imagePathMed );
		ret.append( ", imagePathSml=" + imagePathSml );
		ret.append( ", aPublic=" + aPublic );
		ret.append( ", dateCreated=" + dateCreated );
		ret.append( ", dateModified=" + dateModified );
		ret.append( ", contestRelated=" + contestRelated );
		ret.append( ", featured=" + featured );
		ret.append( ", craft=" + craft );
		ret.append( ", unsaved=" + unsaved );
		ret.append( ", audioPath=" + audioPath );
		ret.append( ", isProcessing=" + isProcessing );
		ret.append( ", isComplied=" + isComplied );
		ret.append( ", dateComplied=" + dateComplied );
		ret.append( ", isError=" + isError );
		ret.append( ", processAsMp4=" + processAsMp4 );
		ret.append( ", mp4JobCompletedDate=" + mp4JobCompletedDate );
		ret.append( ", isAudioMuted=" + isAudioMuted );
		return ret.toString();
	}

	/**
	 */
	public void setProcessAsMp4(short value)
	{
		this.processAsMp4 = value;
	}

	/**
	 */
	public short getProcessAsMp4()
	{
		return this.processAsMp4;
	}

	/**
	 */
	public Date getMp4JobRequestedDate()
	{
		return mp4JobRequestedDate;
	}

	/**
	 */
	public void setMp4JobRequestedDate(Date date)
	{
		this.mp4JobRequestedDate = date;
	}

	/**
	 */
	public Date getMp4JobCompletedDate()
	{
		return mp4JobCompletedDate;
	}

	/**
	 */
	public void setMp4JobCompletedDate(Date date)
	{
		this.mp4JobCompletedDate = date;
	}

	public boolean getIsAudioMuted()
	{
		return isAudioMuted;
	}

	/**
	 */
	public void setIsAudioMuted(boolean v)
	{
		this.isAudioMuted = v;
	}

}
