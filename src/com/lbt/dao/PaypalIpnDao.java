/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.lbt.dao;

import java.util.Date;
import com.lbt.dto.*;
import com.lbt.exceptions.*;

public interface PaypalIpnDao
{
	/** 
	 * Inserts a new row in the paypal_ipn table.
	 */
	public PaypalIpnPk insert(PaypalIpn dto) throws PaypalIpnDaoException;

	/** 
	 * Updates a single row in the paypal_ipn table.
	 */
	public void update(PaypalIpnPk pk, PaypalIpn dto) throws PaypalIpnDaoException;

	/** 
	 * Deletes a single row in the paypal_ipn table.
	 */
	public void delete(PaypalIpnPk pk) throws PaypalIpnDaoException;

	/** 
	 * Returns the rows from the paypal_ipn table that matches the specified primary-key value.
	 */
	public PaypalIpn findByPrimaryKey(PaypalIpnPk pk) throws PaypalIpnDaoException;

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria 'paypal_ipn_id = :paypalIpnId'.
	 */
	public PaypalIpn findByPrimaryKey(long paypalIpnId) throws PaypalIpnDaoException;

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria ''.
	 */
	public PaypalIpn[] findAll() throws PaypalIpnDaoException;

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria 'paypal_ipn_id = :paypalIpnId'.
	 */
	public PaypalIpn[] findWherePaypalIpnIdEquals(long paypalIpnId) throws PaypalIpnDaoException;

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria 'response = :response'.
	 */
	public PaypalIpn[] findWhereResponseEquals(String response) throws PaypalIpnDaoException;

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria 'txn_id = :txnId'.
	 */
	public PaypalIpn[] findWhereTxnIdEquals(String txnId) throws PaypalIpnDaoException;

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria 'txn_type = :txnType'.
	 */
	public PaypalIpn[] findWhereTxnTypeEquals(String txnType) throws PaypalIpnDaoException;

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria 'payment_status = :paymentStatus'.
	 */
	public PaypalIpn[] findWherePaymentStatusEquals(String paymentStatus) throws PaypalIpnDaoException;

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria 'payment_amount = :paymentAmount'.
	 */
	public PaypalIpn[] findWherePaymentAmountEquals(String paymentAmount) throws PaypalIpnDaoException;

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria 'payer_email = :payerEmail'.
	 */
	public PaypalIpn[] findWherePayerEmailEquals(String payerEmail) throws PaypalIpnDaoException;

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria 'payment_date = :paymentDate'.
	 */
	public PaypalIpn[] findWherePaymentDateEquals(Date paymentDate) throws PaypalIpnDaoException;

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria 'ipn_date = :ipnDate'.
	 */
	public PaypalIpn[] findWhereIpnDateEquals(Date ipnDate) throws PaypalIpnDaoException;

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria 'keys = :keys'.
	 */
	public PaypalIpn[] findWhereKeysEquals(String keys) throws PaypalIpnDaoException;

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria 'vals = :vals'.
	 */
	public PaypalIpn[] findWhereValsEquals(String vals) throws PaypalIpnDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the paypal_ipn table that match the specified arbitrary SQL statement
	 */
	public PaypalIpn[] findByDynamicSelect(String sql, Object[] sqlParams) throws PaypalIpnDaoException;

	/** 
	 * Returns all rows from the paypal_ipn table that match the specified arbitrary SQL statement
	 */
	public PaypalIpn[] findByDynamicWhere(String sql, Object[] sqlParams) throws PaypalIpnDaoException;

}
