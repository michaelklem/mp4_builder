/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.lbt.dao;

import java.util.Date;
import com.lbt.dto.*;
import com.lbt.exceptions.*;

public interface GiftCardsDao
{
	/** 
	 * Inserts a new row in the gift_cards table.
	 */
	public GiftCardsPk insert(GiftCards dto) throws GiftCardsDaoException;

	/** 
	 * Updates a single row in the gift_cards table.
	 */
	public void update(GiftCardsPk pk, GiftCards dto) throws GiftCardsDaoException;

	/** 
	 * Deletes a single row in the gift_cards table.
	 */
	public void delete(GiftCardsPk pk) throws GiftCardsDaoException;

	/** 
	 * Returns the rows from the gift_cards table that matches the specified primary-key value.
	 */
	public GiftCards findByPrimaryKey(GiftCardsPk pk) throws GiftCardsDaoException;

	/** 
	 * Returns all rows from the gift_cards table that match the criteria 'gift_card_id = :giftCardId'.
	 */
	public GiftCards findByPrimaryKey(long giftCardId) throws GiftCardsDaoException;

	/** 
	 * Returns all rows from the gift_cards table that match the criteria ''.
	 */
	public GiftCards[] findAll() throws GiftCardsDaoException;

	/** 
	 * Returns all rows from the gift_cards table that match the criteria 'redeemed_by = :redeemedBy'.
	 */
	public GiftCards[] findByUsers(long redeemedBy) throws GiftCardsDaoException;

	/** 
	 * Returns all rows from the gift_cards table that match the criteria 'gift_card_id = :giftCardId'.
	 */
	public GiftCards[] findWhereGiftCardIdEquals(long giftCardId) throws GiftCardsDaoException;

	/** 
	 * Returns all rows from the gift_cards table that match the criteria 'order_id = :orderId'.
	 */
	public GiftCards[] findWhereOrderIdEquals(String orderId) throws GiftCardsDaoException;

	/** 
	 * Returns all rows from the gift_cards table that match the criteria 'buyer_email = :buyerEmail'.
	 */
	public GiftCards[] findWhereBuyerEmailEquals(String buyerEmail) throws GiftCardsDaoException;

	/** 
	 * Returns all rows from the gift_cards table that match the criteria 'date_created = :dateCreated'.
	 */
	public GiftCards[] findWhereDateCreatedEquals(Date dateCreated) throws GiftCardsDaoException;

	/** 
	 * Returns all rows from the gift_cards table that match the criteria 'redemption_code = :redemptionCode'.
	 */
	public GiftCards[] findWhereRedemptionCodeEquals(String redemptionCode) throws GiftCardsDaoException;

	/** 
	 * Returns all rows from the gift_cards table that match the criteria 'paid = :paid'.
	 */
	public GiftCards[] findWherePaidEquals(short paid) throws GiftCardsDaoException;

	/** 
	 * Returns all rows from the gift_cards table that match the criteria 'date_expires = :dateExpires'.
	 */
	public GiftCards[] findWhereDateExpiresEquals(Date dateExpires) throws GiftCardsDaoException;

	/** 
	 * Returns all rows from the gift_cards table that match the criteria 'date_redeemed = :dateRedeemed'.
	 */
	public GiftCards[] findWhereDateRedeemedEquals(Date dateRedeemed) throws GiftCardsDaoException;

	/** 
	 * Returns all rows from the gift_cards table that match the criteria 'redeemed_by = :redeemedBy'.
	 */
	public GiftCards[] findWhereRedeemedByEquals(long redeemedBy) throws GiftCardsDaoException;

	/** 
	 * Returns all rows from the gift_cards table that match the criteria 'gift_receiver = :giftReceiver'.
	 */
	public GiftCards[] findWhereGiftReceiverEquals(String giftReceiver) throws GiftCardsDaoException;

	/** 
	 * Returns all rows from the gift_cards table that match the criteria 'gift_sender = :giftSender'.
	 */
	public GiftCards[] findWhereGiftSenderEquals(String giftSender) throws GiftCardsDaoException;

	/** 
	 * Returns all rows from the gift_cards table that match the criteria 'gift_message = :giftMessage'.
	 */
	public GiftCards[] findWhereGiftMessageEquals(String giftMessage) throws GiftCardsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the gift_cards table that match the specified arbitrary SQL statement
	 */
	public GiftCards[] findByDynamicSelect(String sql, Object[] sqlParams) throws GiftCardsDaoException;

	/** 
	 * Returns all rows from the gift_cards table that match the specified arbitrary SQL statement
	 */
	public GiftCards[] findByDynamicWhere(String sql, Object[] sqlParams) throws GiftCardsDaoException;

}
