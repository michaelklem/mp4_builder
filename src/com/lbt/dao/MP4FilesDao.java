/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.lbt.dao;

import java.util.Date;
import com.lbt.dto.*;
import com.lbt.exceptions.*;

public interface MP4FilesDao
{
	/** 
	 * Inserts a new row in the MP4Files table.
	 */
	public MP4FilesPk insert(MP4Files dto) throws MP4FilesDaoException;

	/** 
	 * Updates a single row in the MP4Files table.
	 */
	public void update(MP4FilesPk pk, MP4Files dto) throws MP4FilesDaoException;

	/** 
	 * Deletes a single row in the MP4Files table.
	 */
	public void delete(MP4FilesPk pk) throws MP4FilesDaoException;

	/** 
	 * Returns the rows from the MP4Files table that matches the specified primary-key value.
	 */
	public MP4Files findByPrimaryKey(MP4FilesPk pk) throws MP4FilesDaoException;

	/** 
	 * Returns all rows from the MP4Files table that match the criteria 'story_id = :storyId'.
	 */
	public MP4Files findByPrimaryKey(long mp4Id) throws MP4FilesDaoException;

	/** 
	 * Returns all rows from the MP4Files table that match the criteria ''.
	 */
	public MP4Files[] findAll() throws MP4FilesDaoException;

	/** 
	 * Returns all rows from the MP4Files table that match the criteria 'user_id = :userId'.
	 */
	public MP4Files[] findByUsers(long userId) throws MP4FilesDaoException;

	/** 
	 * Returns all rows from the MP4Files table that match the criteria 'story_id = :storyId'.
	 */
	public MP4Files[] findWhereMp4IddEquals(long mp4Id) throws MP4FilesDaoException;
	/** 
	 * Returns all rows from the MP4Files table that match the criteria 'story_id = :storyId'.
	 */
	public MP4Files[] findWhereStoryIdEquals(long storyId) throws MP4FilesDaoException;

	/** 
	 * Returns all rows from the MP4Files table that match the criteria 'user_id = :userId'.
	 */
	public MP4Files[] findWhereUserIdEquals(long userId) throws MP4FilesDaoException;

	/** 
	 * Returns all rows from the MP4Files table that match the criteria 'is_processing = :isProcessing'.
	 */
	public MP4Files[] findWhereIsProcessingEquals(short isProcessing) throws MP4FilesDaoException;

	/** 
	 * Returns all rows from the MP4Files table that match the criteria 'is_complied = :isComplied'.
	 */
	public MP4Files[] findWhereIsCompliedEquals(short isComplied) throws MP4FilesDaoException;

	/** 
	 * Returns all rows from the MP4Files table that match the criteria 'is_error = :isError'.
	 */
	public MP4Files[] findWhereIsErrorEquals(short isError) throws MP4FilesDaoException;

	/** 
	 * Returns all rows from the MP4Files table that match the criteria 'date_complied = :dateComplied'.
	 */
	public MP4Files[] findWhereDateCompliedEquals(Date dateComplied) throws MP4FilesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the MP4Files table that match the specified arbitrary SQL statement
	 */
	public MP4Files[] findByDynamicSelect(String sql, Object[] sqlParams) throws MP4FilesDaoException;

	/** 
	 * Returns all rows from the MP4Files table that match the specified arbitrary SQL statement
	 */
	public MP4Files[] findByDynamicWhere(String sql, Object[] sqlParams) throws MP4FilesDaoException;

}
