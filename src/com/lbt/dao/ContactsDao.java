/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.lbt.dao;

import java.util.Date;
import com.lbt.dto.*;
import com.lbt.exceptions.*;

public interface ContactsDao
{
	/** 
	 * Inserts a new row in the contacts table.
	 */
	public ContactsPk insert(Contacts dto) throws ContactsDaoException;

	/** 
	 * Updates a single row in the contacts table.
	 */
	public void update(ContactsPk pk, Contacts dto) throws ContactsDaoException;

	/** 
	 * Deletes a single row in the contacts table.
	 */
	public void delete(ContactsPk pk) throws ContactsDaoException;

	/** 
	 * Returns the rows from the contacts table that matches the specified primary-key value.
	 */
	public Contacts findByPrimaryKey(ContactsPk pk) throws ContactsDaoException;

	/** 
	 * Returns all rows from the contacts table that match the criteria 'contact_id = :contactId'.
	 */
	public Contacts findByPrimaryKey(long contactId) throws ContactsDaoException;

	/** 
	 * Returns all rows from the contacts table that match the criteria ''.
	 */
	public Contacts[] findAll() throws ContactsDaoException;

	/** 
	 * Returns all rows from the contacts table that match the criteria 'user_id = :userId'.
	 */
	public Contacts[] findByUsers(long userId) throws ContactsDaoException;

	/** 
	 * Returns all rows from the contacts table that match the criteria 'contact_id = :contactId'.
	 */
	public Contacts[] findWhereContactIdEquals(long contactId) throws ContactsDaoException;

	/** 
	 * Returns all rows from the contacts table that match the criteria 'user_id = :userId'.
	 */
	public Contacts[] findWhereUserIdEquals(long userId) throws ContactsDaoException;

	/** 
	 * Returns all rows from the contacts table that match the criteria 'name = :name'.
	 */
	public Contacts[] findWhereNameEquals(String name) throws ContactsDaoException;

	/** 
	 * Returns all rows from the contacts table that match the criteria 'email = :email'.
	 */
	public Contacts[] findWhereEmailEquals(String email) throws ContactsDaoException;

	/** 
	 * Returns all rows from the contacts table that match the criteria 'image_path = :imagePath'.
	 */
	public Contacts[] findWhereImagePathEquals(String imagePath) throws ContactsDaoException;

	/** 
	 * Returns all rows from the contacts table that match the criteria 'date_created = :dateCreated'.
	 */
	public Contacts[] findWhereDateCreatedEquals(Date dateCreated) throws ContactsDaoException;

	/** 
	 * Returns all rows from the contacts table that match the criteria 'date_modified = :dateModified'.
	 */
	public Contacts[] findWhereDateModifiedEquals(Date dateModified) throws ContactsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the contacts table that match the specified arbitrary SQL statement
	 */
	public Contacts[] findByDynamicSelect(String sql, Object[] sqlParams) throws ContactsDaoException;

	/** 
	 * Returns all rows from the contacts table that match the specified arbitrary SQL statement
	 */
	public Contacts[] findByDynamicWhere(String sql, Object[] sqlParams) throws ContactsDaoException;

}
