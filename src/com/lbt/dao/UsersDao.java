/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.lbt.dao;

import java.util.Date;
import com.lbt.dto.*;
import com.lbt.exceptions.*;

public interface UsersDao
{
	/** 
	 * Inserts a new row in the users table.
	 */
	public UsersPk insert(Users dto) throws UsersDaoException;

	/** 
	 * Updates a single row in the users table.
	 */
	public void update(UsersPk pk, Users dto) throws UsersDaoException;

	/** 
	 * Deletes a single row in the users table.
	 */
	public void delete(UsersPk pk) throws UsersDaoException;

	/** 
	 * Returns the rows from the users table that matches the specified primary-key value.
	 */
	public Users findByPrimaryKey(UsersPk pk) throws UsersDaoException;

	/** 
	 * Returns all rows from the users table that match the criteria 'user_id = :userId'.
	 */
	public Users findByPrimaryKey(long userId) throws UsersDaoException;

	/** 
	 * Returns all rows from the users table that match the criteria ''.
	 */
	public Users[] findAll() throws UsersDaoException;

	/** 
	 * Returns all rows from the users table that match the criteria 'user_id = :userId'.
	 */
	public Users[] findWhereUserIdEquals(long userId) throws UsersDaoException;

	/** 
	 * Returns all rows from the users table that match the criteria 'first_name = :firstName'.
	 */
	public Users[] findWhereFirstNameEquals(String firstName) throws UsersDaoException;

	/** 
	 * Returns all rows from the users table that match the criteria 'last_name = :lastName'.
	 */
	public Users[] findWhereLastNameEquals(String lastName) throws UsersDaoException;

	/** 
	 * Returns all rows from the users table that match the criteria 'email = :email'.
	 */
	public Users[] findWhereEmailEquals(String email) throws UsersDaoException;

	/** 
	 * Returns all rows from the users table that match the criteria 'password = :password'.
	 */
	public Users[] findWherePasswordEquals(String password) throws UsersDaoException;

	/** 
	 * Returns all rows from the users table that match the criteria 'date_added = :dateAdded'.
	 */
	public Users[] findWhereDateAddedEquals(Date dateAdded) throws UsersDaoException;

	/** 
	 * Returns all rows from the users table that match the criteria 'date_modified = :dateModified'.
	 */
	public Users[] findWhereDateModifiedEquals(Date dateModified) throws UsersDaoException;

	/** 
	 * Returns all rows from the users table that match the criteria 'confirmation_code = :confirmationCode'.
	 */
	public Users[] findWhereConfirmationCodeEquals(String confirmationCode) throws UsersDaoException;

	/** 
	 * Returns all rows from the users table that match the criteria 'confirmed = :confirmed'.
	 */
	public Users[] findWhereConfirmedEquals(short confirmed) throws UsersDaoException;

	/** 
	 * Returns all rows from the users table that match the criteria 'admin = :admin'.
	 */
	public Users[] findWhereAdminEquals(short admin) throws UsersDaoException;

	/** 
	 * Returns all rows from the users table that match the criteria 'paid = :paid'.
	 */
	public Users[] findWherePaidEquals(short paid) throws UsersDaoException;

	/** 
	 * Returns all rows from the users table that match the criteria 'subscription_expires = :subscriptionExpires'.
	 */
	public Users[] findWhereSubscriptionExpiresEquals(Date subscriptionExpires) throws UsersDaoException;

	/** 
	 * Returns all rows from the users table that match the criteria 'subscription_years = :subscriptionYears'.
	 */
	public Users[] findWhereSubscriptionYearsEquals(short subscriptionYears) throws UsersDaoException;

	/** 
	 * Returns all rows from the users table that match the criteria 'reminder_sent = :reminderSent'.
	 */
	public Users[] findWhereReminderSentEquals(short reminderSent) throws UsersDaoException;

	/** 
	 * Returns all rows from the users table that match the criteria 'canceled = :canceled'.
	 */
	public Users[] findWhereCanceledEquals(short canceled) throws UsersDaoException;

	/** 
	 * Returns all rows from the users table that match the criteria 'cancel_date = :cancelDate'.
	 */
	public Users[] findWhereCancelDateEquals(Date cancelDate) throws UsersDaoException;

	/** 
	 * Returns all rows from the users table that match the criteria 'demo_account = :demoAccount'.
	 */
	public Users[] findWhereDemoAccountEquals(short demoAccount) throws UsersDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the users table that match the specified arbitrary SQL statement
	 */
	public Users[] findByDynamicSelect(String sql, Object[] sqlParams) throws UsersDaoException;

	/** 
	 * Returns all rows from the users table that match the specified arbitrary SQL statement
	 */
	public Users[] findByDynamicWhere(String sql, Object[] sqlParams) throws UsersDaoException;

}
