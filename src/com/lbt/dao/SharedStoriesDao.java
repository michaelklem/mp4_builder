/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.lbt.dao;

import com.lbt.dto.*;
import com.lbt.exceptions.*;

public interface SharedStoriesDao
{
	/** 
	 * Inserts a new row in the shared_stories table.
	 */
	public SharedStoriesPk insert(SharedStories dto) throws SharedStoriesDaoException;

	/** 
	 * Updates a single row in the shared_stories table.
	 */
	public void update(SharedStoriesPk pk, SharedStories dto) throws SharedStoriesDaoException;

	/** 
	 * Deletes a single row in the shared_stories table.
	 */
	public void delete(SharedStoriesPk pk) throws SharedStoriesDaoException;

	/** 
	 * Returns the rows from the shared_stories table that matches the specified primary-key value.
	 */
	public SharedStories findByPrimaryKey(SharedStoriesPk pk) throws SharedStoriesDaoException;

	/** 
	 * Returns all rows from the shared_stories table that match the criteria 'shared_story_id = :sharedStoryId'.
	 */
	public SharedStories findByPrimaryKey(long sharedStoryId) throws SharedStoriesDaoException;

	/** 
	 * Returns all rows from the shared_stories table that match the criteria ''.
	 */
	public SharedStories[] findAll() throws SharedStoriesDaoException;

	/** 
	 * Returns all rows from the shared_stories table that match the criteria 'user_id = :userId'.
	 */
	public SharedStories[] findByUsers(long userId) throws SharedStoriesDaoException;

	/** 
	 * Returns all rows from the shared_stories table that match the criteria 'story_id = :storyId'.
	 */
	public SharedStories[] findByStories(long storyId) throws SharedStoriesDaoException;

	/** 
	 * Returns all rows from the shared_stories table that match the criteria 'shared_story_id = :sharedStoryId'.
	 */
	public SharedStories[] findWhereSharedStoryIdEquals(long sharedStoryId) throws SharedStoriesDaoException;

	/** 
	 * Returns all rows from the shared_stories table that match the criteria 'user_id = :userId'.
	 */
	public SharedStories[] findWhereUserIdEquals(long userId) throws SharedStoriesDaoException;

	/** 
	 * Returns all rows from the shared_stories table that match the criteria 'story_id = :storyId'.
	 */
	public SharedStories[] findWhereStoryIdEquals(long storyId) throws SharedStoriesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the shared_stories table that match the specified arbitrary SQL statement
	 */
	public SharedStories[] findByDynamicSelect(String sql, Object[] sqlParams) throws SharedStoriesDaoException;

	/** 
	 * Returns all rows from the shared_stories table that match the specified arbitrary SQL statement
	 */
	public SharedStories[] findByDynamicWhere(String sql, Object[] sqlParams) throws SharedStoriesDaoException;

}
