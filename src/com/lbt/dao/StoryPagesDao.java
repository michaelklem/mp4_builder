/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.lbt.dao;

import java.util.Date;
import com.lbt.dto.*;
import com.lbt.exceptions.*;

public interface StoryPagesDao
{
	/** 
	 * Inserts a new row in the story_pages table.
	 */
	public StoryPagesPk insert(StoryPages dto) throws StoryPagesDaoException;

	/** 
	 * Updates a single row in the story_pages table.
	 */
	public void update(StoryPagesPk pk, StoryPages dto) throws StoryPagesDaoException;

	/** 
	 * Deletes a single row in the story_pages table.
	 */
	public void delete(StoryPagesPk pk) throws StoryPagesDaoException;

	/** 
	 * Returns the rows from the story_pages table that matches the specified primary-key value.
	 */
	public StoryPages findByPrimaryKey(StoryPagesPk pk) throws StoryPagesDaoException;

	/** 
	 * Returns all rows from the story_pages table that match the criteria 'story_page_id = :storyPageId'.
	 */
	public StoryPages findByPrimaryKey(long storyPageId) throws StoryPagesDaoException;

	/** 
	 * Returns all rows from the story_pages table that match the criteria ''.
	 */
	public StoryPages[] findAll() throws StoryPagesDaoException;

	/** 
	 * Returns all rows from the story_pages table that match the criteria 'story_id = :storyId'.
	 */
	public StoryPages[] findByStories(long storyId) throws StoryPagesDaoException;

	/** 
	 * Returns all rows from the story_pages table that match the criteria 'story_page_id = :storyPageId'.
	 */
	public StoryPages[] findWhereStoryPageIdEquals(long storyPageId) throws StoryPagesDaoException;

	/** 
	 * Returns all rows from the story_pages table that match the criteria 'story_id = :storyId'.
	 */
	public StoryPages[] findWhereStoryIdEquals(long storyId) throws StoryPagesDaoException;

	/** 
	 * Returns all rows from the story_pages table that match the criteria 'body = :body'.
	 */
	public StoryPages[] findWhereBodyEquals(String body) throws StoryPagesDaoException;

	/** 
	 * Returns all rows from the story_pages table that match the criteria 'page_num = :pageNum'.
	 */
	public StoryPages[] findWherePageNumEquals(short pageNum) throws StoryPagesDaoException;

	/** 
	 * Returns all rows from the story_pages table that match the criteria 'image_path = :imagePath'.
	 */
	public StoryPages[] findWhereImagePathEquals(String imagePath) throws StoryPagesDaoException;

	/** 
	 * Returns all rows from the story_pages table that match the criteria 'image_path_med = :imagePathMed'.
	 */
	public StoryPages[] findWhereImagePathMedEquals(String imagePathMed) throws StoryPagesDaoException;

	/** 
	 * Returns all rows from the story_pages table that match the criteria 'image_path_sml = :imagePathSml'.
	 */
	public StoryPages[] findWhereImagePathSmlEquals(String imagePathSml) throws StoryPagesDaoException;

	/** 
	 * Returns all rows from the story_pages table that match the criteria 'audio_path = :audioPath'.
	 */
	public StoryPages[] findWhereAudioPathEquals(String audioPath) throws StoryPagesDaoException;

	/** 
	 * Returns all rows from the story_pages table that match the criteria 'date_created = :dateCreated'.
	 */
	public StoryPages[] findWhereDateCreatedEquals(Date dateCreated) throws StoryPagesDaoException;

	/** 
	 * Returns all rows from the story_pages table that match the criteria 'date_modified = :dateModified'.
	 */
	public StoryPages[] findWhereDateModifiedEquals(Date dateModified) throws StoryPagesDaoException;

	/** 
	 * Returns all rows from the story_pages table that match the criteria 'unsaved = :unsaved'.
	 */
	public StoryPages[] findWhereUnsavedEquals(short unsaved) throws StoryPagesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the story_pages table that match the specified arbitrary SQL statement
	 */
	public StoryPages[] findByDynamicSelect(String sql, Object[] sqlParams) throws StoryPagesDaoException;

	/** 
	 * Returns all rows from the story_pages table that match the specified arbitrary SQL statement
	 */
	public StoryPages[] findByDynamicWhere(String sql, Object[] sqlParams) throws StoryPagesDaoException;

}
