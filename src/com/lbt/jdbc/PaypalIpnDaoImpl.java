/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.lbt.jdbc;

import com.lbt.dao.*;
import com.lbt.factory.*;
import java.util.Date;
import com.lbt.dto.*;
import com.lbt.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class PaypalIpnDaoImpl extends AbstractDAO implements PaypalIpnDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT paypal_ipn_id, response, txn_id, txn_type, payment_status, payment_amount, payer_email, payment_date, ipn_date, keys, vals FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( paypal_ipn_id, response, txn_id, txn_type, payment_status, payment_amount, payer_email, payment_date, ipn_date, keys, vals ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET paypal_ipn_id = ?, response = ?, txn_id = ?, txn_type = ?, payment_status = ?, payment_amount = ?, payer_email = ?, payment_date = ?, ipn_date = ?, keys = ?, vals = ? WHERE paypal_ipn_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE paypal_ipn_id = ?";

	/** 
	 * Index of column paypal_ipn_id
	 */
	protected static final int COLUMN_PAYPAL_IPN_ID = 1;

	/** 
	 * Index of column response
	 */
	protected static final int COLUMN_RESPONSE = 2;

	/** 
	 * Index of column txn_id
	 */
	protected static final int COLUMN_TXN_ID = 3;

	/** 
	 * Index of column txn_type
	 */
	protected static final int COLUMN_TXN_TYPE = 4;

	/** 
	 * Index of column payment_status
	 */
	protected static final int COLUMN_PAYMENT_STATUS = 5;

	/** 
	 * Index of column payment_amount
	 */
	protected static final int COLUMN_PAYMENT_AMOUNT = 6;

	/** 
	 * Index of column payer_email
	 */
	protected static final int COLUMN_PAYER_EMAIL = 7;

	/** 
	 * Index of column payment_date
	 */
	protected static final int COLUMN_PAYMENT_DATE = 8;

	/** 
	 * Index of column ipn_date
	 */
	protected static final int COLUMN_IPN_DATE = 9;

	/** 
	 * Index of column keys
	 */
	protected static final int COLUMN_KEYS = 10;

	/** 
	 * Index of column vals
	 */
	protected static final int COLUMN_VALS = 11;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 11;

	/** 
	 * Index of primary-key column paypal_ipn_id
	 */
	protected static final int PK_COLUMN_PAYPAL_IPN_ID = 1;

	/** 
	 * Inserts a new row in the paypal_ipn table.
	 */
	public PaypalIpnPk insert(PaypalIpn dto) throws PaypalIpnDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setLong( index++, dto.getPaypalIpnId() );
			stmt.setString( index++, dto.getResponse() );
			stmt.setString( index++, dto.getTxnId() );
			stmt.setString( index++, dto.getTxnType() );
			stmt.setString( index++, dto.getPaymentStatus() );
			stmt.setString( index++, dto.getPaymentAmount() );
			stmt.setString( index++, dto.getPayerEmail() );
			stmt.setTimestamp(index++, dto.getPaymentDate()==null ? null : new java.sql.Timestamp( dto.getPaymentDate().getTime() ) );
			stmt.setTimestamp(index++, dto.getIpnDate()==null ? null : new java.sql.Timestamp( dto.getIpnDate().getTime() ) );
			stmt.setString( index++, dto.getKeys() );
			stmt.setString( index++, dto.getVals() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setPaypalIpnId( rs.getLong( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PaypalIpnDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the paypal_ipn table.
	 */
	public void update(PaypalIpnPk pk, PaypalIpn dto) throws PaypalIpnDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getPaypalIpnId() );
			stmt.setString( index++, dto.getResponse() );
			stmt.setString( index++, dto.getTxnId() );
			stmt.setString( index++, dto.getTxnType() );
			stmt.setString( index++, dto.getPaymentStatus() );
			stmt.setString( index++, dto.getPaymentAmount() );
			stmt.setString( index++, dto.getPayerEmail() );
			stmt.setTimestamp(index++, dto.getPaymentDate()==null ? null : new java.sql.Timestamp( dto.getPaymentDate().getTime() ) );
			stmt.setTimestamp(index++, dto.getIpnDate()==null ? null : new java.sql.Timestamp( dto.getIpnDate().getTime() ) );
			stmt.setString( index++, dto.getKeys() );
			stmt.setString( index++, dto.getVals() );
			stmt.setLong( 12, pk.getPaypalIpnId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PaypalIpnDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the paypal_ipn table.
	 */
	public void delete(PaypalIpnPk pk) throws PaypalIpnDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getPaypalIpnId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PaypalIpnDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the paypal_ipn table that matches the specified primary-key value.
	 */
	public PaypalIpn findByPrimaryKey(PaypalIpnPk pk) throws PaypalIpnDaoException
	{
		return findByPrimaryKey( pk.getPaypalIpnId() );
	}

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria 'paypal_ipn_id = :paypalIpnId'.
	 */
	public PaypalIpn findByPrimaryKey(long paypalIpnId) throws PaypalIpnDaoException
	{
		PaypalIpn ret[] = findByDynamicSelect( SQL_SELECT + " WHERE paypal_ipn_id = ?", new Object[] {  new Long(paypalIpnId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria ''.
	 */
	public PaypalIpn[] findAll() throws PaypalIpnDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY paypal_ipn_id", null );
	}

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria 'paypal_ipn_id = :paypalIpnId'.
	 */
	public PaypalIpn[] findWherePaypalIpnIdEquals(long paypalIpnId) throws PaypalIpnDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE paypal_ipn_id = ? ORDER BY paypal_ipn_id", new Object[] {  new Long(paypalIpnId) } );
	}

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria 'response = :response'.
	 */
	public PaypalIpn[] findWhereResponseEquals(String response) throws PaypalIpnDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE response = ? ORDER BY response", new Object[] { response } );
	}

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria 'txn_id = :txnId'.
	 */
	public PaypalIpn[] findWhereTxnIdEquals(String txnId) throws PaypalIpnDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE txn_id = ? ORDER BY txn_id", new Object[] { txnId } );
	}

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria 'txn_type = :txnType'.
	 */
	public PaypalIpn[] findWhereTxnTypeEquals(String txnType) throws PaypalIpnDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE txn_type = ? ORDER BY txn_type", new Object[] { txnType } );
	}

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria 'payment_status = :paymentStatus'.
	 */
	public PaypalIpn[] findWherePaymentStatusEquals(String paymentStatus) throws PaypalIpnDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE payment_status = ? ORDER BY payment_status", new Object[] { paymentStatus } );
	}

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria 'payment_amount = :paymentAmount'.
	 */
	public PaypalIpn[] findWherePaymentAmountEquals(String paymentAmount) throws PaypalIpnDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE payment_amount = ? ORDER BY payment_amount", new Object[] { paymentAmount } );
	}

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria 'payer_email = :payerEmail'.
	 */
	public PaypalIpn[] findWherePayerEmailEquals(String payerEmail) throws PaypalIpnDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE payer_email = ? ORDER BY payer_email", new Object[] { payerEmail } );
	}

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria 'payment_date = :paymentDate'.
	 */
	public PaypalIpn[] findWherePaymentDateEquals(Date paymentDate) throws PaypalIpnDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE payment_date = ? ORDER BY payment_date", new Object[] { paymentDate==null ? null : new java.sql.Timestamp( paymentDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria 'ipn_date = :ipnDate'.
	 */
	public PaypalIpn[] findWhereIpnDateEquals(Date ipnDate) throws PaypalIpnDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ipn_date = ? ORDER BY ipn_date", new Object[] { ipnDate==null ? null : new java.sql.Timestamp( ipnDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria 'keys = :keys'.
	 */
	public PaypalIpn[] findWhereKeysEquals(String keys) throws PaypalIpnDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE keys = ? ORDER BY keys", new Object[] { keys } );
	}

	/** 
	 * Returns all rows from the paypal_ipn table that match the criteria 'vals = :vals'.
	 */
	public PaypalIpn[] findWhereValsEquals(String vals) throws PaypalIpnDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE vals = ? ORDER BY vals", new Object[] { vals } );
	}

	/**
	 * Method 'PaypalIpnDaoImpl'
	 * 
	 */
	public PaypalIpnDaoImpl()
	{
	}

	/**
	 * Method 'PaypalIpnDaoImpl'
	 * 
	 * @param userConn
	 */
	public PaypalIpnDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "little_bird_tales.paypal_ipn";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected PaypalIpn fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			PaypalIpn dto = new PaypalIpn();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected PaypalIpn[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			PaypalIpn dto = new PaypalIpn();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		PaypalIpn ret[] = new PaypalIpn[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(PaypalIpn dto, ResultSet rs) throws SQLException
	{
		dto.setPaypalIpnId( rs.getLong( COLUMN_PAYPAL_IPN_ID ) );
		dto.setResponse( rs.getString( COLUMN_RESPONSE ) );
		dto.setTxnId( rs.getString( COLUMN_TXN_ID ) );
		dto.setTxnType( rs.getString( COLUMN_TXN_TYPE ) );
		dto.setPaymentStatus( rs.getString( COLUMN_PAYMENT_STATUS ) );
		dto.setPaymentAmount( rs.getString( COLUMN_PAYMENT_AMOUNT ) );
		dto.setPayerEmail( rs.getString( COLUMN_PAYER_EMAIL ) );
		dto.setPaymentDate( rs.getTimestamp(COLUMN_PAYMENT_DATE ) );
		dto.setIpnDate( rs.getTimestamp(COLUMN_IPN_DATE ) );
		dto.setKeys( rs.getString( COLUMN_KEYS ) );
		dto.setVals( rs.getString( COLUMN_VALS ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(PaypalIpn dto)
	{
	}

	/** 
	 * Returns all rows from the paypal_ipn table that match the specified arbitrary SQL statement
	 */
	public PaypalIpn[] findByDynamicSelect(String sql, Object[] sqlParams) throws PaypalIpnDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PaypalIpnDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the paypal_ipn table that match the specified arbitrary SQL statement
	 */
	public PaypalIpn[] findByDynamicWhere(String sql, Object[] sqlParams) throws PaypalIpnDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new PaypalIpnDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
