/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.lbt.jdbc;

import com.lbt.dao.*;
import com.lbt.factory.*;
import java.util.Date;
import com.lbt.dto.*;
import com.lbt.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class UsersDaoImpl extends AbstractDAO implements UsersDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT user_id, first_name, last_name, email, password, date_added, date_modified, confirmation_code, confirmed, admin, paid, subscription_expires, subscription_years, reminder_sent, canceled, cancel_date, demo_account, bucket_path FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( user_id, first_name, last_name, email, password, date_added, date_modified, confirmation_code, confirmed, admin, paid, subscription_expires, subscription_years, reminder_sent, canceled, cancel_date, demo_account ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET user_id = ?, first_name = ?, last_name = ?, email = ?, password = ?, date_added = ?, date_modified = ?, confirmation_code = ?, confirmed = ?, admin = ?, paid = ?, subscription_expires = ?, subscription_years = ?, reminder_sent = ?, canceled = ?, cancel_date = ?, demo_account = ? WHERE user_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE user_id = ?";

	/** 
	 * Index of column user_id
	 */
	protected static final int COLUMN_USER_ID = 1;

	/** 
	 * Index of column first_name
	 */
	protected static final int COLUMN_FIRST_NAME = 2;

	/** 
	 * Index of column last_name
	 */
	protected static final int COLUMN_LAST_NAME = 3;

	/** 
	 * Index of column email
	 */
	protected static final int COLUMN_EMAIL = 4;

	/** 
	 * Index of column password
	 */
	protected static final int COLUMN_PASSWORD = 5;

	/** 
	 * Index of column date_added
	 */
	protected static final int COLUMN_DATE_ADDED = 6;

	/** 
	 * Index of column date_modified
	 */
	protected static final int COLUMN_DATE_MODIFIED = 7;

	/** 
	 * Index of column confirmation_code
	 */
	protected static final int COLUMN_CONFIRMATION_CODE = 8;

	/** 
	 * Index of column confirmed
	 */
	protected static final int COLUMN_CONFIRMED = 9;

	/** 
	 * Index of column admin
	 */
	protected static final int COLUMN_ADMIN = 10;

	/** 
	 * Index of column paid
	 */
	protected static final int COLUMN_PAID = 11;

	/** 
	 * Index of column subscription_expires
	 */
	protected static final int COLUMN_SUBSCRIPTION_EXPIRES = 12;

	/** 
	 * Index of column subscription_years
	 */
	protected static final int COLUMN_SUBSCRIPTION_YEARS = 13;

	/** 
	 * Index of column reminder_sent
	 */
	protected static final int COLUMN_REMINDER_SENT = 14;

	/** 
	 * Index of column canceled
	 */
	protected static final int COLUMN_CANCELED = 15;

	/** 
	 * Index of column cancel_date
	 */
	protected static final int COLUMN_CANCEL_DATE = 16;

	/** 
	 * Index of column demo_account
	 */
	protected static final int COLUMN_DEMO_ACCOUNT = 17;
	
	protected static final int COLUMN_BUCKET_PATH = 18;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 18;

	/** 
	 * Index of primary-key column user_id
	 */
	protected static final int PK_COLUMN_USER_ID = 1;

	/** 
	 * Inserts a new row in the users table.
	 */
	public UsersPk insert(Users dto) throws UsersDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setLong( index++, dto.getUserId() );
			stmt.setString( index++, dto.getFirstName() );
			stmt.setString( index++, dto.getLastName() );
			stmt.setString( index++, dto.getEmail() );
			stmt.setString( index++, dto.getPassword() );
			stmt.setTimestamp(index++, dto.getDateAdded()==null ? null : new java.sql.Timestamp( dto.getDateAdded().getTime() ) );
			stmt.setTimestamp(index++, dto.getDateModified()==null ? null : new java.sql.Timestamp( dto.getDateModified().getTime() ) );
			stmt.setString( index++, dto.getConfirmationCode() );
			stmt.setShort( index++, dto.getConfirmed() );
			stmt.setShort( index++, dto.getAdmin() );
			stmt.setShort( index++, dto.getPaid() );
			stmt.setTimestamp(index++, dto.getSubscriptionExpires()==null ? null : new java.sql.Timestamp( dto.getSubscriptionExpires().getTime() ) );
			if (dto.isSubscriptionYearsNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getSubscriptionYears() );
			}
		
			stmt.setShort( index++, dto.getReminderSent() );
			stmt.setShort( index++, dto.getCanceled() );
			stmt.setTimestamp(index++, dto.getCancelDate()==null ? null : new java.sql.Timestamp( dto.getCancelDate().getTime() ) );
			stmt.setShort( index++, dto.getDemoAccount() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setUserId( rs.getLong( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UsersDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the users table.
	 */
	public void update(UsersPk pk, Users dto) throws UsersDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getUserId() );
			stmt.setString( index++, dto.getFirstName() );
			stmt.setString( index++, dto.getLastName() );
			stmt.setString( index++, dto.getEmail() );
			stmt.setString( index++, dto.getPassword() );
			stmt.setTimestamp(index++, dto.getDateAdded()==null ? null : new java.sql.Timestamp( dto.getDateAdded().getTime() ) );
			stmt.setTimestamp(index++, dto.getDateModified()==null ? null : new java.sql.Timestamp( dto.getDateModified().getTime() ) );
			stmt.setString( index++, dto.getConfirmationCode() );
			stmt.setShort( index++, dto.getConfirmed() );
			stmt.setShort( index++, dto.getAdmin() );
			stmt.setShort( index++, dto.getPaid() );
			stmt.setTimestamp(index++, dto.getSubscriptionExpires()==null ? null : new java.sql.Timestamp( dto.getSubscriptionExpires().getTime() ) );
			if (dto.isSubscriptionYearsNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getSubscriptionYears() );
			}
		
			stmt.setShort( index++, dto.getReminderSent() );
			stmt.setShort( index++, dto.getCanceled() );
			stmt.setTimestamp(index++, dto.getCancelDate()==null ? null : new java.sql.Timestamp( dto.getCancelDate().getTime() ) );
			stmt.setShort( index++, dto.getDemoAccount() );
			stmt.setLong( 18, pk.getUserId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UsersDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the users table.
	 */
	public void delete(UsersPk pk) throws UsersDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getUserId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UsersDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the users table that matches the specified primary-key value.
	 */
	public Users findByPrimaryKey(UsersPk pk) throws UsersDaoException
	{
		return findByPrimaryKey( pk.getUserId() );
	}

	/** 
	 * Returns all rows from the users table that match the criteria 'user_id = :userId'.
	 */
	public Users findByPrimaryKey(long userId) throws UsersDaoException
	{
		Users ret[] = findByDynamicSelect( SQL_SELECT + " WHERE user_id = ?", new Object[] {  new Long(userId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the users table that match the criteria ''.
	 */
	public Users[] findAll() throws UsersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY user_id", null );
	}

	/** 
	 * Returns all rows from the users table that match the criteria 'user_id = :userId'.
	 */
	public Users[] findWhereUserIdEquals(long userId) throws UsersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE user_id = ? ORDER BY user_id", new Object[] {  new Long(userId) } );
	}

	/** 
	 * Returns all rows from the users table that match the criteria 'first_name = :firstName'.
	 */
	public Users[] findWhereFirstNameEquals(String firstName) throws UsersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE first_name = ? ORDER BY first_name", new Object[] { firstName } );
	}

	/** 
	 * Returns all rows from the users table that match the criteria 'last_name = :lastName'.
	 */
	public Users[] findWhereLastNameEquals(String lastName) throws UsersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE last_name = ? ORDER BY last_name", new Object[] { lastName } );
	}

	/** 
	 * Returns all rows from the users table that match the criteria 'email = :email'.
	 */
	public Users[] findWhereEmailEquals(String email) throws UsersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE email = ? ORDER BY email", new Object[] { email } );
	}

	/** 
	 * Returns all rows from the users table that match the criteria 'password = :password'.
	 */
	public Users[] findWherePasswordEquals(String password) throws UsersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE password = ? ORDER BY password", new Object[] { password } );
	}

	/** 
	 * Returns all rows from the users table that match the criteria 'date_added = :dateAdded'.
	 */
	public Users[] findWhereDateAddedEquals(Date dateAdded) throws UsersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date_added = ? ORDER BY date_added", new Object[] { dateAdded==null ? null : new java.sql.Timestamp( dateAdded.getTime() ) } );
	}

	/** 
	 * Returns all rows from the users table that match the criteria 'date_modified = :dateModified'.
	 */
	public Users[] findWhereDateModifiedEquals(Date dateModified) throws UsersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date_modified = ? ORDER BY date_modified", new Object[] { dateModified==null ? null : new java.sql.Timestamp( dateModified.getTime() ) } );
	}

	/** 
	 * Returns all rows from the users table that match the criteria 'confirmation_code = :confirmationCode'.
	 */
	public Users[] findWhereConfirmationCodeEquals(String confirmationCode) throws UsersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE confirmation_code = ? ORDER BY confirmation_code", new Object[] { confirmationCode } );
	}

	/** 
	 * Returns all rows from the users table that match the criteria 'confirmed = :confirmed'.
	 */
	public Users[] findWhereConfirmedEquals(short confirmed) throws UsersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE confirmed = ? ORDER BY confirmed", new Object[] {  new Short(confirmed) } );
	}

	/** 
	 * Returns all rows from the users table that match the criteria 'admin = :admin'.
	 */
	public Users[] findWhereAdminEquals(short admin) throws UsersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE admin = ? ORDER BY admin", new Object[] {  new Short(admin) } );
	}

	/** 
	 * Returns all rows from the users table that match the criteria 'paid = :paid'.
	 */
	public Users[] findWherePaidEquals(short paid) throws UsersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE paid = ? ORDER BY paid", new Object[] {  new Short(paid) } );
	}

	/** 
	 * Returns all rows from the users table that match the criteria 'subscription_expires = :subscriptionExpires'.
	 */
	public Users[] findWhereSubscriptionExpiresEquals(Date subscriptionExpires) throws UsersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE subscription_expires = ? ORDER BY subscription_expires", new Object[] { subscriptionExpires==null ? null : new java.sql.Timestamp( subscriptionExpires.getTime() ) } );
	}

	/** 
	 * Returns all rows from the users table that match the criteria 'subscription_years = :subscriptionYears'.
	 */
	public Users[] findWhereSubscriptionYearsEquals(short subscriptionYears) throws UsersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE subscription_years = ? ORDER BY subscription_years", new Object[] {  new Short(subscriptionYears) } );
	}

	/** 
	 * Returns all rows from the users table that match the criteria 'reminder_sent = :reminderSent'.
	 */
	public Users[] findWhereReminderSentEquals(short reminderSent) throws UsersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE reminder_sent = ? ORDER BY reminder_sent", new Object[] {  new Short(reminderSent) } );
	}

	/** 
	 * Returns all rows from the users table that match the criteria 'canceled = :canceled'.
	 */
	public Users[] findWhereCanceledEquals(short canceled) throws UsersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE canceled = ? ORDER BY canceled", new Object[] {  new Short(canceled) } );
	}

	/** 
	 * Returns all rows from the users table that match the criteria 'cancel_date = :cancelDate'.
	 */
	public Users[] findWhereCancelDateEquals(Date cancelDate) throws UsersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE cancel_date = ? ORDER BY cancel_date", new Object[] { cancelDate==null ? null : new java.sql.Timestamp( cancelDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the users table that match the criteria 'demo_account = :demoAccount'.
	 */
	public Users[] findWhereDemoAccountEquals(short demoAccount) throws UsersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE demo_account = ? ORDER BY demo_account", new Object[] {  new Short(demoAccount) } );
	}

	/**
	 * Method 'UsersDaoImpl'
	 * 
	 */
	public UsersDaoImpl()
	{
	}

	/**
	 * Method 'UsersDaoImpl'
	 * 
	 * @param userConn
	 */
	public UsersDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "users";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Users fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Users dto = new Users();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Users[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Users dto = new Users();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Users ret[] = new Users[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Users dto, ResultSet rs) throws SQLException
	{
		dto.setUserId( rs.getLong( COLUMN_USER_ID ) );
		dto.setFirstName( rs.getString( COLUMN_FIRST_NAME ) );
		dto.setLastName( rs.getString( COLUMN_LAST_NAME ) );
		dto.setEmail( rs.getString( COLUMN_EMAIL ) );
		dto.setPassword( rs.getString( COLUMN_PASSWORD ) );
		dto.setDateAdded( rs.getTimestamp(COLUMN_DATE_ADDED ) );
		dto.setDateModified( rs.getTimestamp(COLUMN_DATE_MODIFIED ) );
		dto.setConfirmationCode( rs.getString( COLUMN_CONFIRMATION_CODE ) );
		dto.setConfirmed( rs.getShort( COLUMN_CONFIRMED ) );
		dto.setAdmin( rs.getShort( COLUMN_ADMIN ) );
		dto.setPaid( rs.getShort( COLUMN_PAID ) );
		dto.setSubscriptionExpires( rs.getTimestamp(COLUMN_SUBSCRIPTION_EXPIRES ) );
		dto.setSubscriptionYears( rs.getShort( COLUMN_SUBSCRIPTION_YEARS ) );
		if (rs.wasNull()) {
			dto.setSubscriptionYearsNull( true );
		}
		
		dto.setReminderSent( rs.getShort( COLUMN_REMINDER_SENT ) );
		dto.setCanceled( rs.getShort( COLUMN_CANCELED ) );
		dto.setCancelDate( rs.getTimestamp(COLUMN_CANCEL_DATE ) );
		dto.setDemoAccount( rs.getShort( COLUMN_DEMO_ACCOUNT ) );
		dto.setBucketPath( rs.getString( COLUMN_BUCKET_PATH ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Users dto)
	{
	}

	/** 
	 * Returns all rows from the users table that match the specified arbitrary SQL statement
	 */
	public Users[] findByDynamicSelect(String sql, Object[] sqlParams) throws UsersDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UsersDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the users table that match the specified arbitrary SQL statement
	 */
	public Users[] findByDynamicWhere(String sql, Object[] sqlParams) throws UsersDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new UsersDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
