/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.lbt.jdbc;

import com.lbt.dao.*;
import com.lbt.factory.*;
import com.lbt.dto.*;
import com.lbt.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SessionParamsDaoImpl extends AbstractDAO implements SessionParamsDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT session_param_id, session_id, param_name, param_value FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( session_param_id, session_id, param_name, param_value ) VALUES ( ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET session_param_id = ?, session_id = ?, param_name = ?, param_value = ? WHERE session_param_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE session_param_id = ?";

	/** 
	 * Index of column session_param_id
	 */
	protected static final int COLUMN_SESSION_PARAM_ID = 1;

	/** 
	 * Index of column session_id
	 */
	protected static final int COLUMN_SESSION_ID = 2;

	/** 
	 * Index of column param_name
	 */
	protected static final int COLUMN_PARAM_NAME = 3;

	/** 
	 * Index of column param_value
	 */
	protected static final int COLUMN_PARAM_VALUE = 4;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 4;

	/** 
	 * Index of primary-key column session_param_id
	 */
	protected static final int PK_COLUMN_SESSION_PARAM_ID = 1;

	/** 
	 * Inserts a new row in the session_params table.
	 */
	public SessionParamsPk insert(SessionParams dto) throws SessionParamsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setLong( index++, dto.getSessionParamId() );
			stmt.setLong( index++, dto.getSessionId() );
			stmt.setString( index++, dto.getParamName() );
			stmt.setString( index++, dto.getParamValue() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setSessionParamId( rs.getLong( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SessionParamsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the session_params table.
	 */
	public void update(SessionParamsPk pk, SessionParams dto) throws SessionParamsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getSessionParamId() );
			stmt.setLong( index++, dto.getSessionId() );
			stmt.setString( index++, dto.getParamName() );
			stmt.setString( index++, dto.getParamValue() );
			stmt.setLong( 5, pk.getSessionParamId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SessionParamsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the session_params table.
	 */
	public void delete(SessionParamsPk pk) throws SessionParamsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getSessionParamId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SessionParamsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the session_params table that matches the specified primary-key value.
	 */
	public SessionParams findByPrimaryKey(SessionParamsPk pk) throws SessionParamsDaoException
	{
		return findByPrimaryKey( pk.getSessionParamId() );
	}

	/** 
	 * Returns all rows from the session_params table that match the criteria 'session_param_id = :sessionParamId'.
	 */
	public SessionParams findByPrimaryKey(long sessionParamId) throws SessionParamsDaoException
	{
		SessionParams ret[] = findByDynamicSelect( SQL_SELECT + " WHERE session_param_id = ?", new Object[] {  new Long(sessionParamId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the session_params table that match the criteria ''.
	 */
	public SessionParams[] findAll() throws SessionParamsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY session_param_id", null );
	}

	/** 
	 * Returns all rows from the session_params table that match the criteria 'session_id = :sessionId'.
	 */
	public SessionParams[] findBySession(long sessionId) throws SessionParamsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE session_id = ?", new Object[] {  new Long(sessionId) } );
	}

	/** 
	 * Returns all rows from the session_params table that match the criteria 'session_param_id = :sessionParamId'.
	 */
	public SessionParams[] findWhereSessionParamIdEquals(long sessionParamId) throws SessionParamsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE session_param_id = ? ORDER BY session_param_id", new Object[] {  new Long(sessionParamId) } );
	}

	/** 
	 * Returns all rows from the session_params table that match the criteria 'session_id = :sessionId'.
	 */
	public SessionParams[] findWhereSessionIdEquals(long sessionId) throws SessionParamsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE session_id = ? ORDER BY session_id", new Object[] {  new Long(sessionId) } );
	}

	/** 
	 * Returns all rows from the session_params table that match the criteria 'param_name = :paramName'.
	 */
	public SessionParams[] findWhereParamNameEquals(String paramName) throws SessionParamsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE param_name = ? ORDER BY param_name", new Object[] { paramName } );
	}

	/** 
	 * Returns all rows from the session_params table that match the criteria 'param_value = :paramValue'.
	 */
	public SessionParams[] findWhereParamValueEquals(String paramValue) throws SessionParamsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE param_value = ? ORDER BY param_value", new Object[] { paramValue } );
	}

	/**
	 * Method 'SessionParamsDaoImpl'
	 * 
	 */
	public SessionParamsDaoImpl()
	{
	}

	/**
	 * Method 'SessionParamsDaoImpl'
	 * 
	 * @param userConn
	 */
	public SessionParamsDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "session_params";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected SessionParams fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			SessionParams dto = new SessionParams();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected SessionParams[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			SessionParams dto = new SessionParams();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		SessionParams ret[] = new SessionParams[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(SessionParams dto, ResultSet rs) throws SQLException
	{
		dto.setSessionParamId( rs.getLong( COLUMN_SESSION_PARAM_ID ) );
		dto.setSessionId( rs.getLong( COLUMN_SESSION_ID ) );
		dto.setParamName( rs.getString( COLUMN_PARAM_NAME ) );
		dto.setParamValue( rs.getString( COLUMN_PARAM_VALUE ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(SessionParams dto)
	{
	}

	/** 
	 * Returns all rows from the session_params table that match the specified arbitrary SQL statement
	 */
	public SessionParams[] findByDynamicSelect(String sql, Object[] sqlParams) throws SessionParamsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SessionParamsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the session_params table that match the specified arbitrary SQL statement
	 */
	public SessionParams[] findByDynamicWhere(String sql, Object[] sqlParams) throws SessionParamsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SessionParamsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
