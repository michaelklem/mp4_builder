/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.lbt.jdbc;

import com.lbt.dao.*;
import java.util.Date;
import com.lbt.dto.*;
import com.lbt.exceptions.*;

import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class MP4FilesDaoImpl extends AbstractDAO implements MP4FilesDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT mp4_id, story_id, buyer_user_id, is_processing, is_complied, date_complied, is_error, process_as_mp4, mp4_job_requested_date, mp4_job_completed_date, file_name FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( mp4_id, story_id, buyer_user_id, is_processing, is_complied, date_complied, is_error, file_name ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET story_id = ?, buyer_user_id = ?, is_processing = ?, is_complied = ?, date_complied = ?, is_error = ?, process_as_mp4 = ?, mp4_job_completed_date = ?, file_name = ? WHERE mp4_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE mp4_id = ?";

	/** 
	 * Index of column story_id
	 */
	protected static final int COLUMN_MP4_ID = 1;
	protected static final int COLUMN_STORY_ID = 2;

	/** 
	 * Index of column buyer_user_id
	 */
	protected static final int COLUMN_USER_ID = 3;


	/** 
	 * Index of column is_processing
	 */
	protected static final int COLUMN_IS_PROCESSING = 4;

	/** 
	 * Index of column is_complied
	 */
	protected static final int COLUMN_IS_COMPLIED = 5;

	/** 
	 * Index of column date_complied
	 */
	protected static final int COLUMN_DATE_COMPLIED = 6;

	/** 
	 * Index of column is_error
	 */
	protected static final int COLUMN_IS_ERROR = 7;

	protected static final int COLUMN_FILE_NAME = 8;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 9;


	/** 
	 * Inserts a new row in the stories table.
	 */
	public MP4FilesPk insert(MP4Files dto) throws MP4FilesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setLong( index++, dto.getMp4Id() );
			stmt.setLong( index++, dto.getStoryId() );
			stmt.setLong( index++, dto.getBuyerUserId() );
			if (dto.isIsProcessingNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getIsProcessing() );
			}
		
			if (dto.isIsCompliedNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getIsComplied() );
			}
		
			stmt.setTimestamp(index++, dto.getDateComplied()==null ? null : new java.sql.Timestamp( dto.getDateComplied().getTime() ) );
			if (dto.isIsErrorNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getIsError() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setStoryId( rs.getLong( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MP4FilesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the stories table.
	 */
	public void update(MP4FilesPk pk, MP4Files dto) throws MP4FilesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getStoryId() );
			stmt.setLong( index++, dto.getBuyerUserId() );
			if (dto.isIsProcessingNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getIsProcessing() );
			}
		
			if (dto.isIsCompliedNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getIsComplied() );
			}
		
			stmt.setTimestamp(index++, dto.getDateComplied()==null ? null : new java.sql.Timestamp( dto.getDateComplied().getTime() ) );
			if (dto.isIsErrorNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getIsError() );
			}

			stmt.setShort( index++, dto.getProcessAsMp4() );

			stmt.setTimestamp(index++, dto.getMp4JobCompletedDate()==null ? null : new java.sql.Timestamp( dto.getMp4JobCompletedDate().getTime() ) );

			stmt.setString( index++, dto.getFilename() );

			stmt.setLong( index, pk.getMp4Id() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MP4FilesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the stories table.
	 */
	public void delete(MP4FilesPk pk) throws MP4FilesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getMp4Id() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MP4FilesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the stories table that matches the specified primary-key value.
	 */
	public MP4Files findByPrimaryKey(MP4FilesPk pk) throws MP4FilesDaoException
	{
		return findByPrimaryKey( pk.getMp4Id() );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'story_id = :storyId'.
	 */
	public MP4Files findByPrimaryKey(long mp4Id) throws MP4FilesDaoException
	{
		MP4Files ret[] = findByDynamicSelect( SQL_SELECT + " WHERE mp4_id = ?", new Object[] {  new Long(mp4Id) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the stories table that match the criteria ''.
	 */
	public MP4Files[] findAll() throws MP4FilesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY mp4_id", null );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'buyer_user_id = :buyer_user_id'.
	 */
	public MP4Files[] findByUsers(long buyer_user_id) throws MP4FilesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE buyer_user_id = ?", new Object[] {  new Long(buyer_user_id) } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'story_id = :storyId'.
	 */
	public MP4Files[] findWhereStoryIdEquals(long mp4_id) throws MP4FilesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE mp4_id = ? ORDER BY story_id", new Object[] {  new Long(mp4_id) } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'buyer_user_id = :buyer_user_id'.
	 */
	public MP4Files[] findWhereUserIdEquals(long buyer_user_id) throws MP4FilesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE buyer_user_id = ? ORDER BY buyer_user_id", new Object[] {  new Long(buyer_user_id) } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'is_processing = :isProcessing'.
	 */
	public MP4Files[] findWhereIsProcessingEquals(short isProcessing) throws MP4FilesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_processing = ? ORDER BY is_processing", new Object[] {  new Short(isProcessing) } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'is_complied = :isComplied'.
	 */
	public MP4Files[] findWhereIsCompliedEquals(short isComplied) throws MP4FilesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_complied = ? ORDER BY is_complied", new Object[] {  new Short(isComplied) } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'is_error = :isError'.
	 */
	public MP4Files[] findWhereIsErrorEquals(short isError) throws MP4FilesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_error = ? ORDER BY is_error", new Object[] {  new Short(isError) } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'date_complied = :dateComplied'.
	 */
	public MP4Files[] findWhereDateCompliedEquals(Date dateComplied) throws MP4FilesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date_complied = ? ORDER BY date_complied", new Object[] { dateComplied==null ? null : new java.sql.Timestamp( dateComplied.getTime() ) } );
	}

	/**
	 * Method 'MP4FilesDaoImpl'
	 * 
	 */
	public MP4FilesDaoImpl()
	{
	}

	/**
	 * Method 'MP4FilesDaoImpl'
	 * 
	 * @param userConn
	 */
	public MP4FilesDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "mp4_queue";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected MP4Files fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			MP4Files dto = new MP4Files();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected MP4Files[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<MP4Files> resultList = new ArrayList<MP4Files>();
		while (rs.next()) {
			MP4Files dto = new MP4Files();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		MP4Files ret[] = new MP4Files[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(MP4Files dto, ResultSet rs) throws SQLException
	{
		dto.setMp4Id( rs.getLong( COLUMN_MP4_ID ) );
		dto.setStoryId( rs.getLong( COLUMN_STORY_ID ) );
		dto.setBuyerUserId( rs.getLong( COLUMN_USER_ID ) );

		dto.setIsProcessing( rs.getShort( COLUMN_IS_PROCESSING ) );
		if (rs.wasNull()) {
			dto.setIsProcessingNull( true );
		}
		
		dto.setIsComplied( rs.getShort( COLUMN_IS_COMPLIED ) );
		if (rs.wasNull()) {
			dto.setIsCompliedNull( true );
		}
		
		dto.setDateComplied( rs.getTimestamp(COLUMN_DATE_COMPLIED ) );
		dto.setIsError( rs.getShort( COLUMN_IS_ERROR ) );
		if (rs.wasNull()) {
			dto.setIsErrorNull( true );
		}
		dto.setFilename( rs.getString( COLUMN_FILE_NAME ) );		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(MP4Files dto)
	{
	}

	/** 
	 * Returns all rows from the stories table that match the specified arbitrary SQL statement
	 */
	public MP4Files[] findByDynamicSelect(String sql, Object[] sqlParams) throws MP4FilesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MP4FilesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the stories table that match the specified arbitrary SQL statement
	 */
	public MP4Files[] findByDynamicWhere(String sql, Object[] sqlParams) throws MP4FilesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new MP4FilesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	@Override
	public MP4Files[] findWhereMp4IddEquals(long mp4Id)
			throws MP4FilesDaoException {
		// TODO Auto-generated method stub
		return null;
	}

}
