/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.lbt.jdbc;

import com.lbt.dao.*;
import java.util.Date;
import com.lbt.dto.*;
import com.lbt.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class ContactsDaoImpl extends AbstractDAO implements ContactsDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT contact_id, user_id, name, email, image_path, date_created, date_modified FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( contact_id, user_id, name, email, image_path, date_created, date_modified ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET contact_id = ?, user_id = ?, name = ?, email = ?, image_path = ?, date_created = ?, date_modified = ? WHERE contact_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE contact_id = ?";

	/** 
	 * Index of column contact_id
	 */
	protected static final int COLUMN_CONTACT_ID = 1;

	/** 
	 * Index of column user_id
	 */
	protected static final int COLUMN_USER_ID = 2;

	/** 
	 * Index of column name
	 */
	protected static final int COLUMN_NAME = 3;

	/** 
	 * Index of column email
	 */
	protected static final int COLUMN_EMAIL = 4;

	/** 
	 * Index of column image_path
	 */
	protected static final int COLUMN_IMAGE_PATH = 5;

	/** 
	 * Index of column date_created
	 */
	protected static final int COLUMN_DATE_CREATED = 6;

	/** 
	 * Index of column date_modified
	 */
	protected static final int COLUMN_DATE_MODIFIED = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;

	/** 
	 * Index of primary-key column contact_id
	 */
	protected static final int PK_COLUMN_CONTACT_ID = 1;

	/** 
	 * Inserts a new row in the contacts table.
	 */
	public ContactsPk insert(Contacts dto) throws ContactsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setLong( index++, dto.getContactId() );
			stmt.setLong( index++, dto.getUserId() );
			stmt.setString( index++, dto.getName() );
			stmt.setString( index++, dto.getEmail() );
			stmt.setString( index++, dto.getImagePath() );
			stmt.setTimestamp(index++, dto.getDateCreated()==null ? null : new java.sql.Timestamp( dto.getDateCreated().getTime() ) );
			stmt.setTimestamp(index++, dto.getDateModified()==null ? null : new java.sql.Timestamp( dto.getDateModified().getTime() ) );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setContactId( rs.getLong( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContactsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the contacts table.
	 */
	public void update(ContactsPk pk, Contacts dto) throws ContactsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getContactId() );
			stmt.setLong( index++, dto.getUserId() );
			stmt.setString( index++, dto.getName() );
			stmt.setString( index++, dto.getEmail() );
			stmt.setString( index++, dto.getImagePath() );
			stmt.setTimestamp(index++, dto.getDateCreated()==null ? null : new java.sql.Timestamp( dto.getDateCreated().getTime() ) );
			stmt.setTimestamp(index++, dto.getDateModified()==null ? null : new java.sql.Timestamp( dto.getDateModified().getTime() ) );
			stmt.setLong( 8, pk.getContactId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContactsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the contacts table.
	 */
	public void delete(ContactsPk pk) throws ContactsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getContactId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContactsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the contacts table that matches the specified primary-key value.
	 */
	public Contacts findByPrimaryKey(ContactsPk pk) throws ContactsDaoException
	{
		return findByPrimaryKey( pk.getContactId() );
	}

	/** 
	 * Returns all rows from the contacts table that match the criteria 'contact_id = :contactId'.
	 */
	public Contacts findByPrimaryKey(long contactId) throws ContactsDaoException
	{
		Contacts ret[] = findByDynamicSelect( SQL_SELECT + " WHERE contact_id = ?", new Object[] {  new Long(contactId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the contacts table that match the criteria ''.
	 */
	public Contacts[] findAll() throws ContactsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY contact_id", null );
	}

	/** 
	 * Returns all rows from the contacts table that match the criteria 'user_id = :userId'.
	 */
	public Contacts[] findByUsers(long userId) throws ContactsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE user_id = ?", new Object[] {  new Long(userId) } );
	}

	/** 
	 * Returns all rows from the contacts table that match the criteria 'contact_id = :contactId'.
	 */
	public Contacts[] findWhereContactIdEquals(long contactId) throws ContactsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE contact_id = ? ORDER BY contact_id", new Object[] {  new Long(contactId) } );
	}

	/** 
	 * Returns all rows from the contacts table that match the criteria 'user_id = :userId'.
	 */
	public Contacts[] findWhereUserIdEquals(long userId) throws ContactsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE user_id = ? ORDER BY user_id", new Object[] {  new Long(userId) } );
	}

	/** 
	 * Returns all rows from the contacts table that match the criteria 'name = :name'.
	 */
	public Contacts[] findWhereNameEquals(String name) throws ContactsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE name = ? ORDER BY name", new Object[] { name } );
	}

	/** 
	 * Returns all rows from the contacts table that match the criteria 'email = :email'.
	 */
	public Contacts[] findWhereEmailEquals(String email) throws ContactsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE email = ? ORDER BY email", new Object[] { email } );
	}

	/** 
	 * Returns all rows from the contacts table that match the criteria 'image_path = :imagePath'.
	 */
	public Contacts[] findWhereImagePathEquals(String imagePath) throws ContactsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE image_path = ? ORDER BY image_path", new Object[] { imagePath } );
	}

	/** 
	 * Returns all rows from the contacts table that match the criteria 'date_created = :dateCreated'.
	 */
	public Contacts[] findWhereDateCreatedEquals(Date dateCreated) throws ContactsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date_created = ? ORDER BY date_created", new Object[] { dateCreated==null ? null : new java.sql.Timestamp( dateCreated.getTime() ) } );
	}

	/** 
	 * Returns all rows from the contacts table that match the criteria 'date_modified = :dateModified'.
	 */
	public Contacts[] findWhereDateModifiedEquals(Date dateModified) throws ContactsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date_modified = ? ORDER BY date_modified", new Object[] { dateModified==null ? null : new java.sql.Timestamp( dateModified.getTime() ) } );
	}

	/**
	 * Method 'ContactsDaoImpl'
	 * 
	 */
	public ContactsDaoImpl()
	{
	}

	/**
	 * Method 'ContactsDaoImpl'
	 * 
	 * @param userConn
	 */
	public ContactsDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "contacts";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Contacts fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Contacts dto = new Contacts();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Contacts[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection<Contacts> resultList = new ArrayList<Contacts>();
		while (rs.next()) {
			Contacts dto = new Contacts();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Contacts ret[] = new Contacts[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Contacts dto, ResultSet rs) throws SQLException
	{
		dto.setContactId( rs.getLong( COLUMN_CONTACT_ID ) );
		dto.setUserId( rs.getLong( COLUMN_USER_ID ) );
		dto.setName( rs.getString( COLUMN_NAME ) );
		dto.setEmail( rs.getString( COLUMN_EMAIL ) );
		dto.setImagePath( rs.getString( COLUMN_IMAGE_PATH ) );
		dto.setDateCreated( rs.getTimestamp(COLUMN_DATE_CREATED ) );
		dto.setDateModified( rs.getTimestamp(COLUMN_DATE_MODIFIED ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Contacts dto)
	{
	}

	/** 
	 * Returns all rows from the contacts table that match the specified arbitrary SQL statement
	 */
	public Contacts[] findByDynamicSelect(String sql, Object[] sqlParams) throws ContactsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContactsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the contacts table that match the specified arbitrary SQL statement
	 */
	public Contacts[] findByDynamicWhere(String sql, Object[] sqlParams) throws ContactsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ContactsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
