/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.lbt.jdbc;

import com.lbt.dao.*;
import com.lbt.factory.*;
import java.util.Date;
import com.lbt.dto.*;
import com.lbt.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class HistoryDaoImpl extends AbstractDAO implements HistoryDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT history_id, session_id, page_controller, page_action, page_params, page_title, page_type, referer, user_ip, user_agent, date FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( history_id, session_id, page_controller, page_action, page_params, page_title, page_type, referer, user_ip, user_agent, date ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET history_id = ?, session_id = ?, page_controller = ?, page_action = ?, page_params = ?, page_title = ?, page_type = ?, referer = ?, user_ip = ?, user_agent = ?, date = ? WHERE history_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE history_id = ?";

	/** 
	 * Index of column history_id
	 */
	protected static final int COLUMN_HISTORY_ID = 1;

	/** 
	 * Index of column session_id
	 */
	protected static final int COLUMN_SESSION_ID = 2;

	/** 
	 * Index of column page_controller
	 */
	protected static final int COLUMN_PAGE_CONTROLLER = 3;

	/** 
	 * Index of column page_action
	 */
	protected static final int COLUMN_PAGE_ACTION = 4;

	/** 
	 * Index of column page_params
	 */
	protected static final int COLUMN_PAGE_PARAMS = 5;

	/** 
	 * Index of column page_title
	 */
	protected static final int COLUMN_PAGE_TITLE = 6;

	/** 
	 * Index of column page_type
	 */
	protected static final int COLUMN_PAGE_TYPE = 7;

	/** 
	 * Index of column referer
	 */
	protected static final int COLUMN_REFERER = 8;

	/** 
	 * Index of column user_ip
	 */
	protected static final int COLUMN_USER_IP = 9;

	/** 
	 * Index of column user_agent
	 */
	protected static final int COLUMN_USER_AGENT = 10;

	/** 
	 * Index of column date
	 */
	protected static final int COLUMN_DATE = 11;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 11;

	/** 
	 * Index of primary-key column history_id
	 */
	protected static final int PK_COLUMN_HISTORY_ID = 1;

	/** 
	 * Inserts a new row in the history table.
	 */
	public HistoryPk insert(History dto) throws HistoryDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setLong( index++, dto.getHistoryId() );
			stmt.setLong( index++, dto.getSessionId() );
			stmt.setString( index++, dto.getPageController() );
			stmt.setString( index++, dto.getPageAction() );
			stmt.setString( index++, dto.getPageParams() );
			stmt.setString( index++, dto.getPageTitle() );
			stmt.setShort( index++, dto.getPageType() );
			stmt.setString( index++, dto.getReferer() );
			stmt.setString( index++, dto.getUserIp() );
			stmt.setString( index++, dto.getUserAgent() );
			stmt.setTimestamp(index++, dto.getDate()==null ? null : new java.sql.Timestamp( dto.getDate().getTime() ) );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setHistoryId( rs.getLong( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new HistoryDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the history table.
	 */
	public void update(HistoryPk pk, History dto) throws HistoryDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getHistoryId() );
			stmt.setLong( index++, dto.getSessionId() );
			stmt.setString( index++, dto.getPageController() );
			stmt.setString( index++, dto.getPageAction() );
			stmt.setString( index++, dto.getPageParams() );
			stmt.setString( index++, dto.getPageTitle() );
			stmt.setShort( index++, dto.getPageType() );
			stmt.setString( index++, dto.getReferer() );
			stmt.setString( index++, dto.getUserIp() );
			stmt.setString( index++, dto.getUserAgent() );
			stmt.setTimestamp(index++, dto.getDate()==null ? null : new java.sql.Timestamp( dto.getDate().getTime() ) );
			stmt.setLong( 12, pk.getHistoryId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new HistoryDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the history table.
	 */
	public void delete(HistoryPk pk) throws HistoryDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getHistoryId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new HistoryDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the history table that matches the specified primary-key value.
	 */
	public History findByPrimaryKey(HistoryPk pk) throws HistoryDaoException
	{
		return findByPrimaryKey( pk.getHistoryId() );
	}

	/** 
	 * Returns all rows from the history table that match the criteria 'history_id = :historyId'.
	 */
	public History findByPrimaryKey(long historyId) throws HistoryDaoException
	{
		History ret[] = findByDynamicSelect( SQL_SELECT + " WHERE history_id = ?", new Object[] {  new Long(historyId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the history table that match the criteria ''.
	 */
	public History[] findAll() throws HistoryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY history_id", null );
	}

	/** 
	 * Returns all rows from the history table that match the criteria 'session_id = :sessionId'.
	 */
	public History[] findBySession(long sessionId) throws HistoryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE session_id = ?", new Object[] {  new Long(sessionId) } );
	}

	/** 
	 * Returns all rows from the history table that match the criteria 'history_id = :historyId'.
	 */
	public History[] findWhereHistoryIdEquals(long historyId) throws HistoryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE history_id = ? ORDER BY history_id", new Object[] {  new Long(historyId) } );
	}

	/** 
	 * Returns all rows from the history table that match the criteria 'session_id = :sessionId'.
	 */
	public History[] findWhereSessionIdEquals(long sessionId) throws HistoryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE session_id = ? ORDER BY session_id", new Object[] {  new Long(sessionId) } );
	}

	/** 
	 * Returns all rows from the history table that match the criteria 'page_controller = :pageController'.
	 */
	public History[] findWherePageControllerEquals(String pageController) throws HistoryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE page_controller = ? ORDER BY page_controller", new Object[] { pageController } );
	}

	/** 
	 * Returns all rows from the history table that match the criteria 'page_action = :pageAction'.
	 */
	public History[] findWherePageActionEquals(String pageAction) throws HistoryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE page_action = ? ORDER BY page_action", new Object[] { pageAction } );
	}

	/** 
	 * Returns all rows from the history table that match the criteria 'page_params = :pageParams'.
	 */
	public History[] findWherePageParamsEquals(String pageParams) throws HistoryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE page_params = ? ORDER BY page_params", new Object[] { pageParams } );
	}

	/** 
	 * Returns all rows from the history table that match the criteria 'page_title = :pageTitle'.
	 */
	public History[] findWherePageTitleEquals(String pageTitle) throws HistoryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE page_title = ? ORDER BY page_title", new Object[] { pageTitle } );
	}

	/** 
	 * Returns all rows from the history table that match the criteria 'page_type = :pageType'.
	 */
	public History[] findWherePageTypeEquals(short pageType) throws HistoryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE page_type = ? ORDER BY page_type", new Object[] {  new Short(pageType) } );
	}

	/** 
	 * Returns all rows from the history table that match the criteria 'referer = :referer'.
	 */
	public History[] findWhereRefererEquals(String referer) throws HistoryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE referer = ? ORDER BY referer", new Object[] { referer } );
	}

	/** 
	 * Returns all rows from the history table that match the criteria 'user_ip = :userIp'.
	 */
	public History[] findWhereUserIpEquals(String userIp) throws HistoryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE user_ip = ? ORDER BY user_ip", new Object[] { userIp } );
	}

	/** 
	 * Returns all rows from the history table that match the criteria 'user_agent = :userAgent'.
	 */
	public History[] findWhereUserAgentEquals(String userAgent) throws HistoryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE user_agent = ? ORDER BY user_agent", new Object[] { userAgent } );
	}

	/** 
	 * Returns all rows from the history table that match the criteria 'date = :date'.
	 */
	public History[] findWhereDateEquals(Date date) throws HistoryDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date = ? ORDER BY date", new Object[] { date==null ? null : new java.sql.Timestamp( date.getTime() ) } );
	}

	/**
	 * Method 'HistoryDaoImpl'
	 * 
	 */
	public HistoryDaoImpl()
	{
	}

	/**
	 * Method 'HistoryDaoImpl'
	 * 
	 * @param userConn
	 */
	public HistoryDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "history";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected History fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			History dto = new History();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected History[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			History dto = new History();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		History ret[] = new History[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(History dto, ResultSet rs) throws SQLException
	{
		dto.setHistoryId( rs.getLong( COLUMN_HISTORY_ID ) );
		dto.setSessionId( rs.getLong( COLUMN_SESSION_ID ) );
		dto.setPageController( rs.getString( COLUMN_PAGE_CONTROLLER ) );
		dto.setPageAction( rs.getString( COLUMN_PAGE_ACTION ) );
		dto.setPageParams( rs.getString( COLUMN_PAGE_PARAMS ) );
		dto.setPageTitle( rs.getString( COLUMN_PAGE_TITLE ) );
		dto.setPageType( rs.getShort( COLUMN_PAGE_TYPE ) );
		dto.setReferer( rs.getString( COLUMN_REFERER ) );
		dto.setUserIp( rs.getString( COLUMN_USER_IP ) );
		dto.setUserAgent( rs.getString( COLUMN_USER_AGENT ) );
		dto.setDate( rs.getTimestamp(COLUMN_DATE ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(History dto)
	{
	}

	/** 
	 * Returns all rows from the history table that match the specified arbitrary SQL statement
	 */
	public History[] findByDynamicSelect(String sql, Object[] sqlParams) throws HistoryDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new HistoryDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the history table that match the specified arbitrary SQL statement
	 */
	public History[] findByDynamicWhere(String sql, Object[] sqlParams) throws HistoryDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new HistoryDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
