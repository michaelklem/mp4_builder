/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.lbt.jdbc;

import com.lbt.dao.*;
import com.lbt.factory.*;
import java.util.Date;
import com.lbt.dto.*;
import com.lbt.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class StoriesDaoImpl extends AbstractDAO implements StoriesDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT story_id, user_id, title, author, image_path, image_path_med, image_path_sml, public, date_created, date_modified, contest_related, featured, craft, unsaved, audio_path, is_processing, is_complied, date_complied, is_error, process_as_mp4, mp4_job_requested_date, mp4_job_completed_date, file_name, is_audio_muted FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( story_id, user_id, title, author, image_path, image_path_med, image_path_sml, public, date_created, date_modified, contest_related, featured, craft, unsaved, audio_path, is_processing, is_complied, date_complied, is_error ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET story_id = ?, user_id = ?, title = ?, author = ?, image_path = ?, image_path_med = ?, image_path_sml = ?, public = ?, date_created = ?, date_modified = ?, contest_related = ?, featured = ?, craft = ?, unsaved = ?, audio_path = ?, is_processing = ?, is_complied = ?, date_complied = ?, is_error = ?, process_as_mp4 = ?, mp4_job_completed_date = ?, file_name = ? WHERE story_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE story_id = ?";

	/** 
	 * Index of column story_id
	 */
	protected static final int COLUMN_STORY_ID = 1;

	/** 
	 * Index of column user_id
	 */
	protected static final int COLUMN_USER_ID = 2;

	/** 
	 * Index of column title
	 */
	protected static final int COLUMN_TITLE = 3;

	/** 
	 * Index of column author
	 */
	protected static final int COLUMN_AUTHOR = 4;

	/** 
	 * Index of column image_path
	 */
	protected static final int COLUMN_IMAGE_PATH = 5;

	/** 
	 * Index of column image_path_med
	 */
	protected static final int COLUMN_IMAGE_PATH_MED = 6;

	/** 
	 * Index of column image_path_sml
	 */
	protected static final int COLUMN_IMAGE_PATH_SML = 7;

	/** 
	 * Index of column public
	 */
	protected static final int COLUMN_A_PUBLIC = 8;

	/** 
	 * Index of column date_created
	 */
	protected static final int COLUMN_DATE_CREATED = 9;

	/** 
	 * Index of column date_modified
	 */
	protected static final int COLUMN_DATE_MODIFIED = 10;

	/** 
	 * Index of column contest_related
	 */
	protected static final int COLUMN_CONTEST_RELATED = 11;

	/** 
	 * Index of column featured
	 */
	protected static final int COLUMN_FEATURED = 12;

	/** 
	 * Index of column craft
	 */
	protected static final int COLUMN_CRAFT = 13;

	/** 
	 * Index of column unsaved
	 */
	protected static final int COLUMN_UNSAVED = 14;

	/** 
	 * Index of column audio_path
	 */
	protected static final int COLUMN_AUDIO_PATH = 15;

	/** 
	 * Index of column is_processing
	 */
	protected static final int COLUMN_IS_PROCESSING = 16;

	/** 
	 * Index of column is_complied
	 */
	protected static final int COLUMN_IS_COMPLIED = 17;

	/** 
	 * Index of column date_complied
	 */
	protected static final int COLUMN_DATE_COMPLIED = 18;

	/** 
	 * Index of column is_error
	 */
	protected static final int COLUMN_IS_ERROR = 19;

	protected static final int COLUMN_FILE_NAME = 20;
	protected static final int COLUMN_IS_AUDIO_MUTED = 24;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 20;

	/** 
	 * Index of primary-key column story_id
	 */
	protected static final int PK_COLUMN_STORY_ID = 1;

	/** 
	 * Inserts a new row in the stories table.
	 */
	public StoriesPk insert(Stories dto) throws StoriesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setLong( index++, dto.getStoryId() );
			stmt.setLong( index++, dto.getUserId() );
			stmt.setString( index++, dto.getTitle() );
			stmt.setString( index++, dto.getAuthor() );
			stmt.setString( index++, dto.getImagePath() );
			stmt.setString( index++, dto.getImagePathMed() );
			stmt.setString( index++, dto.getImagePathSml() );
			stmt.setShort( index++, dto.getAPublic() );
			stmt.setTimestamp(index++, dto.getDateCreated()==null ? null : new java.sql.Timestamp( dto.getDateCreated().getTime() ) );
			stmt.setTimestamp(index++, dto.getDateModified()==null ? null : new java.sql.Timestamp( dto.getDateModified().getTime() ) );
			if (dto.isContestRelatedNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getContestRelated() );
			}
		
			if (dto.isFeaturedNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getFeatured() );
			}
		
			if (dto.isCraftNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getCraft() );
			}
		
			stmt.setShort( index++, dto.getUnsaved() );
			stmt.setString( index++, dto.getAudioPath() );
			if (dto.isIsProcessingNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getIsProcessing() );
			}
		
			if (dto.isIsCompliedNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getIsComplied() );
			}
		
			stmt.setTimestamp(index++, dto.getDateComplied()==null ? null : new java.sql.Timestamp( dto.getDateComplied().getTime() ) );
			if (dto.isIsErrorNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getIsError() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setStoryId( rs.getLong( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StoriesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the stories table.
	 */
	public void update(StoriesPk pk, Stories dto) throws StoriesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getStoryId() );
			stmt.setLong( index++, dto.getUserId() );
			stmt.setString( index++, dto.getTitle() );
			stmt.setString( index++, dto.getAuthor() );
			stmt.setString( index++, dto.getImagePath() );
			stmt.setString( index++, dto.getImagePathMed() );
			stmt.setString( index++, dto.getImagePathSml() );
			stmt.setShort( index++, dto.getAPublic() );
			stmt.setTimestamp(index++, dto.getDateCreated()==null ? null : new java.sql.Timestamp( dto.getDateCreated().getTime() ) );
			stmt.setTimestamp(index++, dto.getDateModified()==null ? null : new java.sql.Timestamp( dto.getDateModified().getTime() ) );
			if (dto.isContestRelatedNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getContestRelated() );
			}
		
			if (dto.isFeaturedNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getFeatured() );
			}
		
			if (dto.isCraftNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getCraft() );
			}
		
			stmt.setShort( index++, dto.getUnsaved() );
			stmt.setString( index++, dto.getAudioPath() );
			if (dto.isIsProcessingNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getIsProcessing() );
			}
		
			if (dto.isIsCompliedNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getIsComplied() );
			}
		
			stmt.setTimestamp(index++, dto.getDateComplied()==null ? null : new java.sql.Timestamp( dto.getDateComplied().getTime() ) );
			if (dto.isIsErrorNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getIsError() );
			}

			stmt.setShort( index++, dto.getProcessAsMp4() );

			stmt.setTimestamp(index++, dto.getMp4JobCompletedDate()==null ? null : new java.sql.Timestamp( dto.getMp4JobCompletedDate().getTime() ) );

			stmt.setString( index++, dto.getFilename() );

			stmt.setLong( 23, pk.getStoryId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StoriesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the stories table.
	 */
	public void delete(StoriesPk pk) throws StoriesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getStoryId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StoriesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the stories table that matches the specified primary-key value.
	 */
	public Stories findByPrimaryKey(StoriesPk pk) throws StoriesDaoException
	{
		return findByPrimaryKey( pk.getStoryId() );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'story_id = :storyId'.
	 */
	public Stories findByPrimaryKey(long storyId) throws StoriesDaoException
	{
		Stories ret[] = findByDynamicSelect( SQL_SELECT + " WHERE story_id = ?", new Object[] {  new Long(storyId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the stories table that match the criteria ''.
	 */
	public Stories[] findAll() throws StoriesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY story_id", null );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'user_id = :userId'.
	 */
	public Stories[] findByUsers(long userId) throws StoriesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE user_id = ?", new Object[] {  new Long(userId) } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'story_id = :storyId'.
	 */
	public Stories[] findWhereStoryIdEquals(long storyId) throws StoriesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE story_id = ? ORDER BY story_id", new Object[] {  new Long(storyId) } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'user_id = :userId'.
	 */
	public Stories[] findWhereUserIdEquals(long userId) throws StoriesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE user_id = ? ORDER BY user_id", new Object[] {  new Long(userId) } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'title = :title'.
	 */
	public Stories[] findWhereTitleEquals(String title) throws StoriesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE title = ? ORDER BY title", new Object[] { title } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'author = :author'.
	 */
	public Stories[] findWhereAuthorEquals(String author) throws StoriesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE author = ? ORDER BY author", new Object[] { author } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'image_path = :imagePath'.
	 */
	public Stories[] findWhereImagePathEquals(String imagePath) throws StoriesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE image_path = ? ORDER BY image_path", new Object[] { imagePath } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'image_path_med = :imagePathMed'.
	 */
	public Stories[] findWhereImagePathMedEquals(String imagePathMed) throws StoriesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE image_path_med = ? ORDER BY image_path_med", new Object[] { imagePathMed } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'image_path_sml = :imagePathSml'.
	 */
	public Stories[] findWhereImagePathSmlEquals(String imagePathSml) throws StoriesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE image_path_sml = ? ORDER BY image_path_sml", new Object[] { imagePathSml } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'public = :aPublic'.
	 */
	public Stories[] findWhereAPublicEquals(short aPublic) throws StoriesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE public = ? ORDER BY public", new Object[] {  new Short(aPublic) } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'date_created = :dateCreated'.
	 */
	public Stories[] findWhereDateCreatedEquals(Date dateCreated) throws StoriesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date_created = ? ORDER BY date_created", new Object[] { dateCreated==null ? null : new java.sql.Timestamp( dateCreated.getTime() ) } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'date_modified = :dateModified'.
	 */
	public Stories[] findWhereDateModifiedEquals(Date dateModified) throws StoriesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date_modified = ? ORDER BY date_modified", new Object[] { dateModified==null ? null : new java.sql.Timestamp( dateModified.getTime() ) } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'contest_related = :contestRelated'.
	 */
	public Stories[] findWhereContestRelatedEquals(short contestRelated) throws StoriesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE contest_related = ? ORDER BY contest_related", new Object[] {  new Short(contestRelated) } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'featured = :featured'.
	 */
	public Stories[] findWhereFeaturedEquals(short featured) throws StoriesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE featured = ? ORDER BY featured", new Object[] {  new Short(featured) } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'craft = :craft'.
	 */
	public Stories[] findWhereCraftEquals(short craft) throws StoriesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE craft = ? ORDER BY craft", new Object[] {  new Short(craft) } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'unsaved = :unsaved'.
	 */
	public Stories[] findWhereUnsavedEquals(short unsaved) throws StoriesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE unsaved = ? ORDER BY unsaved", new Object[] {  new Short(unsaved) } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'audio_path = :audioPath'.
	 */
	public Stories[] findWhereAudioPathEquals(String audioPath) throws StoriesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE audio_path = ? ORDER BY audio_path", new Object[] { audioPath } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'is_processing = :isProcessing'.
	 */
	public Stories[] findWhereIsProcessingEquals(short isProcessing) throws StoriesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_processing = ? ORDER BY is_processing", new Object[] {  new Short(isProcessing) } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'is_complied = :isComplied'.
	 */
	public Stories[] findWhereIsCompliedEquals(short isComplied) throws StoriesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_complied = ? ORDER BY is_complied", new Object[] {  new Short(isComplied) } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'is_error = :isError'.
	 */
	public Stories[] findWhereIsErrorEquals(short isError) throws StoriesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE is_error = ? ORDER BY is_error", new Object[] {  new Short(isError) } );
	}

	/** 
	 * Returns all rows from the stories table that match the criteria 'date_complied = :dateComplied'.
	 */
	public Stories[] findWhereDateCompliedEquals(Date dateComplied) throws StoriesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE date_complied = ? ORDER BY date_complied", new Object[] { dateComplied==null ? null : new java.sql.Timestamp( dateComplied.getTime() ) } );
	}

	/**
	 * Method 'StoriesDaoImpl'
	 * 
	 */
	public StoriesDaoImpl()
	{
	}

	/**
	 * Method 'StoriesDaoImpl'
	 * 
	 * @param userConn
	 */
	public StoriesDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "stories";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Stories fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Stories dto = new Stories();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Stories[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Stories dto = new Stories();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Stories ret[] = new Stories[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Stories dto, ResultSet rs) throws SQLException
	{
		dto.setStoryId( rs.getLong( COLUMN_STORY_ID ) );
		dto.setUserId( rs.getLong( COLUMN_USER_ID ) );
		dto.setTitle( rs.getString( COLUMN_TITLE ) );
		dto.setAuthor( rs.getString( COLUMN_AUTHOR ) );
		dto.setImagePath( rs.getString( COLUMN_IMAGE_PATH ) );
		dto.setImagePathMed( rs.getString( COLUMN_IMAGE_PATH_MED ) );
		dto.setImagePathSml( rs.getString( COLUMN_IMAGE_PATH_SML ) );
		dto.setAPublic( rs.getShort( COLUMN_A_PUBLIC ) );
		dto.setDateCreated( rs.getTimestamp(COLUMN_DATE_CREATED ) );
		dto.setDateModified( rs.getTimestamp(COLUMN_DATE_MODIFIED ) );
		dto.setContestRelated( rs.getShort( COLUMN_CONTEST_RELATED ) );
		dto.setIsAudioMuted( rs.getBoolean( COLUMN_IS_AUDIO_MUTED ) );
		if (rs.wasNull()) {
			dto.setContestRelatedNull( true );
		}
		
		dto.setFeatured( rs.getShort( COLUMN_FEATURED ) );
		if (rs.wasNull()) {
			dto.setFeaturedNull( true );
		}
		
		dto.setCraft( rs.getShort( COLUMN_CRAFT ) );
		if (rs.wasNull()) {
			dto.setCraftNull( true );
		}
		
		dto.setUnsaved( rs.getShort( COLUMN_UNSAVED ) );
		dto.setAudioPath( rs.getString( COLUMN_AUDIO_PATH ) );
		dto.setIsProcessing( rs.getShort( COLUMN_IS_PROCESSING ) );
		if (rs.wasNull()) {
			dto.setIsProcessingNull( true );
		}
		
		dto.setIsComplied( rs.getShort( COLUMN_IS_COMPLIED ) );
		if (rs.wasNull()) {
			dto.setIsCompliedNull( true );
		}
		
		dto.setDateComplied( rs.getTimestamp(COLUMN_DATE_COMPLIED ) );
		dto.setIsError( rs.getShort( COLUMN_IS_ERROR ) );
		if (rs.wasNull()) {
			dto.setIsErrorNull( true );
		}

		dto.setFilename( rs.getString( COLUMN_FILE_NAME ) );

	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Stories dto)
	{
	}

	/** 
	 * Returns all rows from the stories table that match the specified arbitrary SQL statement
	 */
	public Stories[] findByDynamicSelect(String sql, Object[] sqlParams) throws StoriesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StoriesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the stories table that match the specified arbitrary SQL statement
	 */
	public Stories[] findByDynamicWhere(String sql, Object[] sqlParams) throws StoriesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new StoriesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
