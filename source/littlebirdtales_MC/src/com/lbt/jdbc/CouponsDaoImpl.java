/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.lbt.jdbc;

import com.lbt.dao.*;
import com.lbt.factory.*;
import java.util.Date;
import com.lbt.dto.*;
import com.lbt.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class CouponsDaoImpl extends AbstractDAO implements CouponsDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT coupon_id, code, paypal_url, description, active, from_date, to_date, notes, subscription_years FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( coupon_id, code, paypal_url, description, active, from_date, to_date, notes, subscription_years ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET coupon_id = ?, code = ?, paypal_url = ?, description = ?, active = ?, from_date = ?, to_date = ?, notes = ?, subscription_years = ? WHERE coupon_id = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE coupon_id = ?";

	/** 
	 * Index of column coupon_id
	 */
	protected static final int COLUMN_COUPON_ID = 1;

	/** 
	 * Index of column code
	 */
	protected static final int COLUMN_CODE = 2;

	/** 
	 * Index of column paypal_url
	 */
	protected static final int COLUMN_PAYPAL_URL = 3;

	/** 
	 * Index of column description
	 */
	protected static final int COLUMN_DESCRIPTION = 4;

	/** 
	 * Index of column active
	 */
	protected static final int COLUMN_ACTIVE = 5;

	/** 
	 * Index of column from_date
	 */
	protected static final int COLUMN_FROM_DATE = 6;

	/** 
	 * Index of column to_date
	 */
	protected static final int COLUMN_TO_DATE = 7;

	/** 
	 * Index of column notes
	 */
	protected static final int COLUMN_NOTES = 8;

	/** 
	 * Index of column subscription_years
	 */
	protected static final int COLUMN_SUBSCRIPTION_YEARS = 9;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 9;

	/** 
	 * Index of primary-key column coupon_id
	 */
	protected static final int PK_COLUMN_COUPON_ID = 1;

	/** 
	 * Inserts a new row in the coupons table.
	 */
	public CouponsPk insert(Coupons dto) throws CouponsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setLong( index++, dto.getCouponId() );
			stmt.setString( index++, dto.getCode() );
			stmt.setString( index++, dto.getPaypalUrl() );
			stmt.setString( index++, dto.getDescription() );
			if (dto.isActiveNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getActive() );
			}
		
			stmt.setTimestamp(index++, dto.getFromDate()==null ? null : new java.sql.Timestamp( dto.getFromDate().getTime() ) );
			stmt.setTimestamp(index++, dto.getToDate()==null ? null : new java.sql.Timestamp( dto.getToDate().getTime() ) );
			stmt.setString( index++, dto.getNotes() );
			if (dto.isSubscriptionYearsNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getSubscriptionYears() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setCouponId( rs.getLong( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CouponsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the coupons table.
	 */
	public void update(CouponsPk pk, Coupons dto) throws CouponsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getCouponId() );
			stmt.setString( index++, dto.getCode() );
			stmt.setString( index++, dto.getPaypalUrl() );
			stmt.setString( index++, dto.getDescription() );
			if (dto.isActiveNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getActive() );
			}
		
			stmt.setTimestamp(index++, dto.getFromDate()==null ? null : new java.sql.Timestamp( dto.getFromDate().getTime() ) );
			stmt.setTimestamp(index++, dto.getToDate()==null ? null : new java.sql.Timestamp( dto.getToDate().getTime() ) );
			stmt.setString( index++, dto.getNotes() );
			if (dto.isSubscriptionYearsNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setShort( index++, dto.getSubscriptionYears() );
			}
		
			stmt.setLong( 10, pk.getCouponId() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CouponsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the coupons table.
	 */
	public void delete(CouponsPk pk) throws CouponsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getCouponId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CouponsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the coupons table that matches the specified primary-key value.
	 */
	public Coupons findByPrimaryKey(CouponsPk pk) throws CouponsDaoException
	{
		return findByPrimaryKey( pk.getCouponId() );
	}

	/** 
	 * Returns all rows from the coupons table that match the criteria 'coupon_id = :couponId'.
	 */
	public Coupons findByPrimaryKey(long couponId) throws CouponsDaoException
	{
		Coupons ret[] = findByDynamicSelect( SQL_SELECT + " WHERE coupon_id = ?", new Object[] {  new Long(couponId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the coupons table that match the criteria ''.
	 */
	public Coupons[] findAll() throws CouponsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY coupon_id", null );
	}

	/** 
	 * Returns all rows from the coupons table that match the criteria 'coupon_id = :couponId'.
	 */
	public Coupons[] findWhereCouponIdEquals(long couponId) throws CouponsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE coupon_id = ? ORDER BY coupon_id", new Object[] {  new Long(couponId) } );
	}

	/** 
	 * Returns all rows from the coupons table that match the criteria 'code = :code'.
	 */
	public Coupons[] findWhereCodeEquals(String code) throws CouponsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE code = ? ORDER BY code", new Object[] { code } );
	}

	/** 
	 * Returns all rows from the coupons table that match the criteria 'paypal_url = :paypalUrl'.
	 */
	public Coupons[] findWherePaypalUrlEquals(String paypalUrl) throws CouponsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE paypal_url = ? ORDER BY paypal_url", new Object[] { paypalUrl } );
	}

	/** 
	 * Returns all rows from the coupons table that match the criteria 'description = :description'.
	 */
	public Coupons[] findWhereDescriptionEquals(String description) throws CouponsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE description = ? ORDER BY description", new Object[] { description } );
	}

	/** 
	 * Returns all rows from the coupons table that match the criteria 'active = :active'.
	 */
	public Coupons[] findWhereActiveEquals(short active) throws CouponsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE active = ? ORDER BY active", new Object[] {  new Short(active) } );
	}

	/** 
	 * Returns all rows from the coupons table that match the criteria 'from_date = :fromDate'.
	 */
	public Coupons[] findWhereFromDateEquals(Date fromDate) throws CouponsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE from_date = ? ORDER BY from_date", new Object[] { fromDate==null ? null : new java.sql.Timestamp( fromDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the coupons table that match the criteria 'to_date = :toDate'.
	 */
	public Coupons[] findWhereToDateEquals(Date toDate) throws CouponsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE to_date = ? ORDER BY to_date", new Object[] { toDate==null ? null : new java.sql.Timestamp( toDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the coupons table that match the criteria 'notes = :notes'.
	 */
	public Coupons[] findWhereNotesEquals(String notes) throws CouponsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE notes = ? ORDER BY notes", new Object[] { notes } );
	}

	/** 
	 * Returns all rows from the coupons table that match the criteria 'subscription_years = :subscriptionYears'.
	 */
	public Coupons[] findWhereSubscriptionYearsEquals(short subscriptionYears) throws CouponsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE subscription_years = ? ORDER BY subscription_years", new Object[] {  new Short(subscriptionYears) } );
	}

	/**
	 * Method 'CouponsDaoImpl'
	 * 
	 */
	public CouponsDaoImpl()
	{
	}

	/**
	 * Method 'CouponsDaoImpl'
	 * 
	 * @param userConn
	 */
	public CouponsDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "little_bird_tales.coupons";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Coupons fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Coupons dto = new Coupons();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Coupons[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Coupons dto = new Coupons();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Coupons ret[] = new Coupons[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Coupons dto, ResultSet rs) throws SQLException
	{
		dto.setCouponId( rs.getLong( COLUMN_COUPON_ID ) );
		dto.setCode( rs.getString( COLUMN_CODE ) );
		dto.setPaypalUrl( rs.getString( COLUMN_PAYPAL_URL ) );
		dto.setDescription( rs.getString( COLUMN_DESCRIPTION ) );
		dto.setActive( rs.getShort( COLUMN_ACTIVE ) );
		if (rs.wasNull()) {
			dto.setActiveNull( true );
		}
		
		dto.setFromDate( rs.getTimestamp(COLUMN_FROM_DATE ) );
		dto.setToDate( rs.getTimestamp(COLUMN_TO_DATE ) );
		dto.setNotes( rs.getString( COLUMN_NOTES ) );
		dto.setSubscriptionYears( rs.getShort( COLUMN_SUBSCRIPTION_YEARS ) );
		if (rs.wasNull()) {
			dto.setSubscriptionYearsNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Coupons dto)
	{
	}

	/** 
	 * Returns all rows from the coupons table that match the specified arbitrary SQL statement
	 */
	public Coupons[] findByDynamicSelect(String sql, Object[] sqlParams) throws CouponsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CouponsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the coupons table that match the specified arbitrary SQL statement
	 */
	public Coupons[] findByDynamicWhere(String sql, Object[] sqlParams) throws CouponsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new CouponsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
