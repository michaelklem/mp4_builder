/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.lbt.dao;

import java.util.Date;
import com.lbt.dto.*;
import com.lbt.exceptions.*;

public interface HistoryDao
{
	/** 
	 * Inserts a new row in the history table.
	 */
	public HistoryPk insert(History dto) throws HistoryDaoException;

	/** 
	 * Updates a single row in the history table.
	 */
	public void update(HistoryPk pk, History dto) throws HistoryDaoException;

	/** 
	 * Deletes a single row in the history table.
	 */
	public void delete(HistoryPk pk) throws HistoryDaoException;

	/** 
	 * Returns the rows from the history table that matches the specified primary-key value.
	 */
	public History findByPrimaryKey(HistoryPk pk) throws HistoryDaoException;

	/** 
	 * Returns all rows from the history table that match the criteria 'history_id = :historyId'.
	 */
	public History findByPrimaryKey(long historyId) throws HistoryDaoException;

	/** 
	 * Returns all rows from the history table that match the criteria ''.
	 */
	public History[] findAll() throws HistoryDaoException;

	/** 
	 * Returns all rows from the history table that match the criteria 'session_id = :sessionId'.
	 */
	public History[] findBySession(long sessionId) throws HistoryDaoException;

	/** 
	 * Returns all rows from the history table that match the criteria 'history_id = :historyId'.
	 */
	public History[] findWhereHistoryIdEquals(long historyId) throws HistoryDaoException;

	/** 
	 * Returns all rows from the history table that match the criteria 'session_id = :sessionId'.
	 */
	public History[] findWhereSessionIdEquals(long sessionId) throws HistoryDaoException;

	/** 
	 * Returns all rows from the history table that match the criteria 'page_controller = :pageController'.
	 */
	public History[] findWherePageControllerEquals(String pageController) throws HistoryDaoException;

	/** 
	 * Returns all rows from the history table that match the criteria 'page_action = :pageAction'.
	 */
	public History[] findWherePageActionEquals(String pageAction) throws HistoryDaoException;

	/** 
	 * Returns all rows from the history table that match the criteria 'page_params = :pageParams'.
	 */
	public History[] findWherePageParamsEquals(String pageParams) throws HistoryDaoException;

	/** 
	 * Returns all rows from the history table that match the criteria 'page_title = :pageTitle'.
	 */
	public History[] findWherePageTitleEquals(String pageTitle) throws HistoryDaoException;

	/** 
	 * Returns all rows from the history table that match the criteria 'page_type = :pageType'.
	 */
	public History[] findWherePageTypeEquals(short pageType) throws HistoryDaoException;

	/** 
	 * Returns all rows from the history table that match the criteria 'referer = :referer'.
	 */
	public History[] findWhereRefererEquals(String referer) throws HistoryDaoException;

	/** 
	 * Returns all rows from the history table that match the criteria 'user_ip = :userIp'.
	 */
	public History[] findWhereUserIpEquals(String userIp) throws HistoryDaoException;

	/** 
	 * Returns all rows from the history table that match the criteria 'user_agent = :userAgent'.
	 */
	public History[] findWhereUserAgentEquals(String userAgent) throws HistoryDaoException;

	/** 
	 * Returns all rows from the history table that match the criteria 'date = :date'.
	 */
	public History[] findWhereDateEquals(Date date) throws HistoryDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the history table that match the specified arbitrary SQL statement
	 */
	public History[] findByDynamicSelect(String sql, Object[] sqlParams) throws HistoryDaoException;

	/** 
	 * Returns all rows from the history table that match the specified arbitrary SQL statement
	 */
	public History[] findByDynamicWhere(String sql, Object[] sqlParams) throws HistoryDaoException;

}
