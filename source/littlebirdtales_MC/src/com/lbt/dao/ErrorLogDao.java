/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.lbt.dao;

import java.util.Date;
import com.lbt.dto.*;
import com.lbt.exceptions.*;

public interface ErrorLogDao
{
	/** 
	 * Inserts a new row in the error_log table.
	 */
	public ErrorLogPk insert(ErrorLog dto) throws ErrorLogDaoException;

	/** 
	 * Updates a single row in the error_log table.
	 */
	public void update(ErrorLogPk pk, ErrorLog dto) throws ErrorLogDaoException;

	/** 
	 * Deletes a single row in the error_log table.
	 */
	public void delete(ErrorLogPk pk) throws ErrorLogDaoException;

	/** 
	 * Returns the rows from the error_log table that matches the specified primary-key value.
	 */
	public ErrorLog findByPrimaryKey(ErrorLogPk pk) throws ErrorLogDaoException;

	/** 
	 * Returns all rows from the error_log table that match the criteria 'id = :id'.
	 */
	public ErrorLog findByPrimaryKey(long id) throws ErrorLogDaoException;

	/** 
	 * Returns all rows from the error_log table that match the criteria ''.
	 */
	public ErrorLog[] findAll() throws ErrorLogDaoException;

	/** 
	 * Returns all rows from the error_log table that match the criteria 'id = :id'.
	 */
	public ErrorLog[] findWhereIdEquals(long id) throws ErrorLogDaoException;

	/** 
	 * Returns all rows from the error_log table that match the criteria 'description = :description'.
	 */
	public ErrorLog[] findWhereDescriptionEquals(String description) throws ErrorLogDaoException;

	/** 
	 * Returns all rows from the error_log table that match the criteria 'story_id = :storyId'.
	 */
	public ErrorLog[] findWhereStoryIdEquals(long storyId) throws ErrorLogDaoException;

	/** 
	 * Returns all rows from the error_log table that match the criteria 'date_created = :dateCreated'.
	 */
	public ErrorLog[] findWhereDateCreatedEquals(Date dateCreated) throws ErrorLogDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the error_log table that match the specified arbitrary SQL statement
	 */
	public ErrorLog[] findByDynamicSelect(String sql, Object[] sqlParams) throws ErrorLogDaoException;

	/** 
	 * Returns all rows from the error_log table that match the specified arbitrary SQL statement
	 */
	public ErrorLog[] findByDynamicWhere(String sql, Object[] sqlParams) throws ErrorLogDaoException;

}
